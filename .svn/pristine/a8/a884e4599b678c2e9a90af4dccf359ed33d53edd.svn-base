package com.wanma.ims.controller.config;

import java.sql.Time;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import com.wanma.ims.common.domain.ElectricParamDO;
import com.wanma.ims.common.domain.base.Pager;
import com.wanma.ims.constants.ResultCodeConstants;
import com.wanma.ims.constants.WanmaConstants;
import com.wanma.ims.controller.BaseController;
import com.wanma.ims.controller.result.JsonException;
import com.wanma.ims.controller.result.JsonResult;
import com.wanma.ims.core.GlobalSystem;
import com.wanma.ims.service.ElectricParamService;
import com.wanma.ims.util.ApiUtil;
import com.wanma.ims.util.HttpsUtil;


/**
 * 电桩配置参数 
 */
@Controller
@RequestMapping("/config/param")
public class ElectricParamController extends BaseController{
   
	private final Logger LOGGER = LoggerFactory.getLogger(this.getClass());

	@Autowired
	private ElectricParamService electricParamService;

	/**
	 * 电桩配置参数-分页
	 */
	@RequestMapping(value = "/getElectricParamListPage", method = RequestMethod.POST)
	@ResponseBody
	public void getElectricParamListPage(Pager pager, ElectricParamDO electricParamDO) {
		JsonResult result = new JsonResult();
		try {
			Long total = electricParamService.countElectricParamList(electricParamDO);
			if (total <= pager.getOffset()) {
				pager.setPageNo(1L);
			}
			pager.setTotal(total);
			electricParamDO.setPager(pager);
			List<ElectricParamDO> list = electricParamService.getElectricParamList(electricParamDO);
			result.setPager(pager);
			result.setDataObject(list);
		} catch (Exception e) {
			LOGGER.debug(this.getClass() + ".getElectricParamListPage() error : ", e);
			responseJson(new JsonException("电桩配置参数分页列表失败"));
			return;
		}
		responseJson(result);
	}
	
	/**
	 * 电桩参数设置-离线充电次数
	 * 
	 */
	@RequestMapping(value = "/setOffline", method = RequestMethod.POST)
	@ResponseBody
	public void setOffline(ElectricParamDO electricParamDO) {
		JsonResult result = new JsonResult();
		try {
			electricParamDO.setCreator(getCurrentUserName());
			electricParamDO.setModifier(getCurrentUserName());
			electricParamDO.setArgId(WanmaConstants.ELECTRIC_PARAM_OFFLINE);
			String codes = request.getParameter("codes");
			List<String> infosArr = Arrays.asList(codes.split(","));
			String sendStr = "";
			for (String code : infosArr) {
				sendStr += code.trim() + ",";
				electricParamDO.setElectricPileCode(code);
				if(!electricParamService.setElectricParam(electricParamDO)){
					responseJson(new JsonResult(false, ResultCodeConstants.FAILED, "电桩参数离线充电次数设置失败"));
					return;
				}
			}
			// 下发离线充电设置
			if(sendStr.length() > 0){
				codes = codes.substring(0, codes.length() - 1);
				codes += ":10316";
				String token = ApiUtil.getToken();
		    	HttpsUtil.getResponseParam(GlobalSystem.getConfig("apiRoot") + "/app/net/sendChargeSet.do?paramStrs=" + codes + "&t=" + token, "status");
			}
		} catch (Exception e) {
			LOGGER.debug(this.getClass() + ".setElectricParam() error : ", e);
			responseJson(new JsonException("电桩参数离线充电次数设置失败"));
			return;
		}
		responseJson(result);
	}
	
	/**
	 * 电桩参数设置-定时开关
	 * 
	 */
	@RequestMapping(value = "/setTimeCharge", method = RequestMethod.POST)
	@ResponseBody
	public void setTimeCharge(ElectricParamDO electricParamDO) {
		JsonResult result = new JsonResult();
		try {
			String codes = request.getParameter("codes");
			String hour = request.getParameter("hour");
			String minute = request.getParameter("minute");
			String status = request.getParameter("status");
			String second = "00";
			SimpleDateFormat sdf = new SimpleDateFormat("HH:mm:ss");
			String timeStr = hour+":"+minute+":"+second;
			Time chargeTime= new Time(sdf.parse(timeStr).getTime());
			List<String> infosArr = Arrays.asList(codes.split(","));
			String sendStr = "";
			for (String code : infosArr) {
				sendStr += code.trim() + ",";
				electricParamDO.setElectricPileCode(code);
				electricParamDO.setStatus(Integer.parseInt(status));
				electricParamDO.setIssuedStatus(0);
				electricParamDO.setChargeTime(chargeTime);
				if(!electricParamService.setTimeCharge(electricParamDO)){
					responseJson(new JsonResult(false, ResultCodeConstants.FAILED, "电桩参数定时开关设置失败"));
					return;
				}
			}
			//将桩体编号拼成要发送的格式
			if(sendStr.length() > 0){
				sendStr = sendStr.substring(0, sendStr.length() - 1);
				sendStr += ":" + hour+":"+minute+":"+status;
				String token = ApiUtil.getToken();
				//调用接口定时充电
				HttpsUtil.getResponseParam(GlobalSystem.getConfig("apiRoot") + "/app/net/sendTimeCharge.do?paramStrs=" + sendStr + "&t=" + token, "status");
			}
		} catch (Exception e) {
			LOGGER.debug(this.getClass() + ".setElectricParam() error : ", e);
			responseJson(new JsonException("电桩参数定时开关设置失败"));
			return;
		}
		responseJson(result);
	}
	
	/**
	 * 电桩参数设置-定时SOC
	 * 
	 */
	@RequestMapping(value = "/setSoc", method = RequestMethod.POST)
	@ResponseBody
	public void setSoc(ElectricParamDO electricParamDO) {
		JsonResult result = new JsonResult();
		try {
			electricParamDO.setCreator(getCurrentUserName());
			electricParamDO.setModifier(getCurrentUserName());
			electricParamDO.setArgId(WanmaConstants.ELECTRIC_PARAM_SOC);
			String codes = request.getParameter("codes");
			List<String> infosArr = Arrays.asList(codes.split(","));
			String sendStr = "";
			for (String code : infosArr) {
				sendStr += code.trim() + ",";
				electricParamDO.setElectricPileCode(code);
				if(!electricParamService.setElectricParam(electricParamDO)){
					responseJson(new JsonResult(false, ResultCodeConstants.FAILED, "电桩参数SOC设置失败"));
					return;
				}
			}
			// 下发离线充电设置
			if(sendStr.length() > 0){
				codes = codes.substring(0, codes.length() - 1);
				codes += ":10316";
				String token = ApiUtil.getToken();
		    	HttpsUtil.getResponseParam(GlobalSystem.getConfig("apiRoot") + "/app/net/sendChargeSet.do?paramStrs=" + codes + "&t=" + token, "status");
			}
		} catch (Exception e) {
			LOGGER.debug(this.getClass() + ".setElectricParam() error : ", e);
			responseJson(new JsonException("电桩参数SOC设置失败"));
			return;
		}
		responseJson(result);
	}

}
