package com.wanma.ims.controller.order;

import java.text.ParseException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.collections.CollectionUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.google.common.collect.Lists;
import com.wanma.ims.common.domain.OrderDO;
import com.wanma.ims.common.domain.OrderInvoiceDO;
import com.wanma.ims.common.domain.base.Pager;
import com.wanma.ims.constants.DownFileConstants;
import com.wanma.ims.constants.ResultCodeConstants;
import com.wanma.ims.controller.BaseController;
import com.wanma.ims.controller.result.JsonException;
import com.wanma.ims.controller.result.JsonResult;
import com.wanma.ims.service.OrderService;
import com.wanma.ims.service.OrderStatisticService;
import com.wanma.ims.service.PurchaseHistoryService;
import com.wanma.ims.util.ImsBaseUtil;

/**
 * 充电订单 
 */
@Controller
public class OrderController extends BaseController{
	
	private final Logger LOGGER = LoggerFactory.getLogger(this.getClass());
	@Autowired
	OrderService orderService;
	@Autowired
	OrderStatisticService orderStatisticService;
	@Autowired
	PurchaseHistoryService purchaseHistoryService;
	
	java.text.SimpleDateFormat sdf = new java.text.SimpleDateFormat("yyyy-MM-dd HH:mm:ss");  
	
	/**
	 * 用户主页|卡主页-订单
	 */
	@RequestMapping(value = "/home/getHomeUserOrder")
	@ResponseBody
	public void getHomeUserOrder(Long userId) {
		JsonResult result = new JsonResult();
		try {
			//TODO: 1.累计订单  3.累计电量  4.今日订单
			Map<String,String> map = new HashMap<String,String>();
			map.put("1", orderStatisticService.countTotalElectricCharge(userId)+"");
			map.put("3", orderStatisticService.countTotalOrder(userId));
			map.put("4", orderStatisticService.countTotalTodayOrder(userId));
			result.setDataObject(map);
		} catch (Exception e) {
			LOGGER.debug(this.getClass() + ".getHomeUserOrder() error : ", e);
			responseJson(new JsonException("主页-获取用户订单信息失败"));
			return;
		}
		responseJson(result);
	}
	
	/**
	 * 公司主页-订单
	 */
	@RequestMapping(value = "/home/getHomeCpyOrder")
	@ResponseBody
	public void getHomeCpyOrder(Integer cpyNumber) {
		JsonResult result = new JsonResult();
		try {
			//TODO: 1.累计订单 2.累计消费 3.累计电量  4.今日订单
			Map<String,String> map = new HashMap<String,String>();
			map.put("1", orderStatisticService.countTotalCpyOrder(cpyNumber));
			map.put("2", orderStatisticService.countTotalCpyConsume(cpyNumber)+"");
			map.put("3", orderStatisticService.countTotalCpyElectricCharge(cpyNumber)+"");
			map.put("4", orderStatisticService.countTotalTodayCpyOrder(cpyNumber));
			
			result.setDataObject(map);
		} catch (Exception e) {
			LOGGER.debug(this.getClass() + ".getHomeCpyOrder() error : ", e);
			responseJson(new JsonException("主页-获取公司订单信息失败"));
			return;
		}
		responseJson(result);
	}
	
	/**
	 * 发票管理-开票详情 
	 */
	@RequestMapping(value = "/invoice/getOrderInvoiceDetail")
	@ResponseBody
	public void getOrderInvoiceDetail(Long invoiceId,Pager pager){
		JsonResult result = new JsonResult();
		try {
			List<String> numberList = purchaseHistoryService.getTransNumberByInvoiceId(invoiceId);
			OrderInvoiceDO orderInvoiceDO = new OrderInvoiceDO();
			orderInvoiceDO.setTransNumbers(numberList);
			Long total = orderService.countOrderInvoiceDetail(orderInvoiceDO);
			if (total <= pager.getOffset()) {
				pager.setPageNo(1L);
			}
			pager.setTotal(total);
			orderInvoiceDO.setPager(pager);
			List<OrderInvoiceDO> orderList = orderService.getOrderInvoiceDetail(orderInvoiceDO);
			result.setPager(pager);
			result.setDataObject(orderList);
		} catch (Exception e) {
			LOGGER.debug(this.getClass() + ".getOrderInvoiceDetail() error : ", e);
			responseJson(new JsonException("发票管理-获取开票详情失败"));
			return;
		}
		responseJson(result);
	}
	
	/**
	 * 发票管理-选择可以开票的订单 
	 */
	@RequestMapping(value = "/invoice/getOrderInvoiceRecord")
	@ResponseBody
	public void getOrderInvoiceRecord(){
		
	}
	
	/** 
	 * 订单管理 - 非第三方
	 */
	@RequestMapping(value = "/order/getOrderListPage")
	@ResponseBody
	public void getOrderListPage(OrderDO orderDO,Pager pager){
		JsonResult result = new JsonResult();
		try {
			orderDO.setCpyNumberList(getCurrentLoginUser().getCpyNumberList());
			Long total = orderService.countOrderList(orderDO);
			if (total <= pager.getOffset()) {
				pager.setPageNo(1L);
			}
			pager.setTotal(total);
			orderDO.setPager(pager);
			List<OrderDO> list = orderService.getOrderList(orderDO);
			result.setPager(pager);
			result.setDataObject(list);
		} catch (Exception e) {
			LOGGER.debug(this.getClass() + ".getOrderListPage() error : ", e);
			responseJson(new JsonException("订单管理-获取订单失败"));
			return;
		}
		responseJson(result);
	}
	
	/** 
	 * 订单管理 - 第三方
	 */
	@RequestMapping(value = "/order/getThirdOrderListPage")
	@ResponseBody
	public void getThirdOrderListPage(OrderDO orderDO,Pager pager){
		JsonResult result = new JsonResult();
		try {
			orderDO.setCpyNumberList(getCurrentLoginUser().getCpyNumberList());
			Long total = orderService.countThirdOrderList(orderDO);
			if (total <= pager.getOffset()) {
				pager.setPageNo(1L);
			}
			pager.setTotal(total);
			orderDO.setPager(pager);
			List<OrderDO> list = orderService.getThirdOrderList(orderDO);
			result.setPager(pager);
			result.setDataObject(list);
		} catch (Exception e) {
			LOGGER.debug(this.getClass() + ".getThirdOrderListPage() error : ", e);
			responseJson(new JsonException("订单管理-获取订单失败"));
			return;
		}
		responseJson(result);
	}
	
	/**
	 * 订单-非第三方导出
	 */
	@RequestMapping(value = "/order/exportOrder")
	@ResponseBody
	public void exportOrder(OrderDO orderDO) {
		try{
			orderDO.setCpyNumberList(getCurrentLoginUser().getCpyNumberList());
			Long total = orderService.countOrderList(orderDO);
			if(total > 50000){
				responseJson(new JsonResult(false, ResultCodeConstants.FAILED, ResultCodeConstants.ERROR_MSG_EXPORT_MAX_DATA));
				return;
			}
			List<OrderDO> list = orderService.getOrderList(orderDO);
			if(CollectionUtils.isEmpty(list)){
				responseJson(new JsonResult(false, ResultCodeConstants.FAILED, ResultCodeConstants.ERROR_MSG_EXPORT_DATA_EMPTY));
				return;
			}
			List<String> headList = Lists.newArrayList("orderCode,订单号 ","electricPileCode,电桩编码","totalElectricCharge,电费","totalServiceMoney,服务费","totalfavMoney,优惠","totalElectricCharge,电量","orderStatus,状态",
					"powerstationName,充电点 ","startSoc,开始SOC","endSoc,结束SOC","chargeTime,充电时长","JMoney,尖电费","FMoney,峰电费","PMoney,平电费","GMoney,谷电费","timeQuantum,充电时间段","cardNum,卡号");
			List<Map<String, Object>> datalist = createDataExcelList(list);
			ImsBaseUtil.responseExcel(response,headList,datalist, DownFileConstants.FILE_ORDER_EXPORT, DownFileConstants.FILE_ORDER_EXPOR_SHEET);
		}catch(Exception e){
			LOGGER.error(this.getClass() + ".exportOrder() error : ", e);
			responseJson(new JsonException("导出订单数据失败"));
			return;
		}
	}
	/**
	 * 订单-第三方导出
	 */
	@RequestMapping(value = "/order/exportThirdOrder")
	@ResponseBody
	public void exportThirdOrder(OrderDO orderDO) {
		try{
			orderDO.setCpyNumberList(getCurrentLoginUser().getCpyNumberList());
			Long total = orderService.countThirdOrderList(orderDO);
			if(total > 50000){
				responseJson(new JsonResult(false, ResultCodeConstants.FAILED, ResultCodeConstants.ERROR_MSG_EXPORT_MAX_DATA));
				return;
			}
			List<OrderDO> list = orderService.getThirdOrderList(orderDO);
			if(CollectionUtils.isEmpty(list)){
				responseJson(new JsonResult(false, ResultCodeConstants.FAILED, ResultCodeConstants.ERROR_MSG_EXPORT_DATA_EMPTY));
				return;
			}
			List<String> headList = Lists.newArrayList("orderCode,订单号 ","electricPileCode,电桩编码","totalElectricCharge,电费","totalServiceMoney,服务费","totalfavMoney,优惠","totalElectricCharge,电量","orderStatus,状态",
					"powerstationName,充电点 ","startSoc,开始SOC","endSoc,结束SOC","chargeTime,充电时长","JMoney,尖电费","FMoney,峰电费","PMoney,平电费","GMoney,谷电费","timeQuantum,充电时间段","cardNum,卡号");
			List<Map<String, Object>> datalist = createDataExcelList(list);
			ImsBaseUtil.responseExcel(response,headList,datalist, DownFileConstants.FILE_THIRD_ORDER_EXPORT, DownFileConstants.FILE_THIRD_ORDER_EXPOR_SHEET);
		}catch(Exception e){
			LOGGER.error(this.getClass() + ".exportOrder() error : ", e);
			responseJson(new JsonException("导出订单数据失败"));
			return;
		}
	}
	private List<Map<String, Object>> createDataExcelList(List<OrderDO> list){
		List<Map<String, Object>> dataList = new ArrayList<Map<String, Object>>();
		for (OrderDO order : list) {
			Map<String, Object> map = new HashMap<String, Object>();
			map.put("orderCode", order.getOrderCode());
			map.put("electricPileCode", order.getElectricPileCode());
			map.put("totalElectricCharge", order.getTotalElectricCharge());
			map.put("totalServiceMoney", order.getTotalServiceMoney());
			map.put("totalfavMoney", order.getTotalfavMoney());
			map.put("totalElectricCharge", order.getTotalElectricCharge());
			map.put("orderStatus", order.getOrderStatus());
			map.put("powerstationName", order.getPowerstationName());
			map.put("startSoc", order.getStartSoc());
			map.put("endSoc", order.getEndSoc());
			try {
				java.util.Date beginDate = sdf.parse(order.getStartChargeTime());
				java.util.Date endDate = sdf.parse(order.getEndChargeTime()); 
				double c =(endDate.getTime()-beginDate.getTime())/60000d;
				String minute = String.format("%.2f", c);
				map.put("chargeTime", minute);
			} catch (ParseException e) {
				map.put("chargeTime", "");
			} 
			map.put("timeQuantum", order.getTimeQuantum());
			map.put("cardNum", order.getCardNum());
			map.put("JMoney", order.getJMoney());
			map.put("FMoney", order.getFMoney());
			map.put("PMoney", order.getPMoney());
			map.put("GMoney", order.getGMoney());
			map.put("JServiceMoney", "");
			map.put("FServiceMoney", "");
			map.put("PServiceMoney", "");
			map.put("GServiceMoney", "");
			dataList.add(map);
		}
		return dataList;
	}

}
