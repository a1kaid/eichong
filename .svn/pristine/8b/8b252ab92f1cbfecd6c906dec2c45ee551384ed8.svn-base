package com.wanma.ims.controller.config;

import java.util.List;

import javax.servlet.http.HttpServletRequest;

import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.wanma.ims.common.domain.BomListDO;
import com.wanma.ims.common.domain.TypeSpanDO;
import com.wanma.ims.common.domain.UserDO;
import com.wanma.ims.common.domain.base.Pager;
import com.wanma.ims.constants.ResultCodeConstants;
import com.wanma.ims.constants.WanmaConstants;
import com.wanma.ims.controller.BaseController;
import com.wanma.ims.controller.result.JsonResult;
import com.wanma.ims.service.TypeSpanService;

/**
 * 产品型号管理
 */
@Controller
@RequestMapping("/config/typeSpan")
public class TypeSpanController extends BaseController{
	private static Logger log = Logger.getLogger(TypeSpanController.class);
	@Autowired
	private TypeSpanService typeSpanService;
	
	/**
	 * 产品型号管理
	 * @author mb
	 * @param 
	 * @return
	 */
	@RequestMapping(value = "/getTypeSpanList")
	@ResponseBody
	public void getTypeSpanList(@ModelAttribute("pager") Pager pager,
			@ModelAttribute TypeSpanDO typeSpanDO,HttpServletRequest request) {
		JsonResult result = new JsonResult();
		List<TypeSpanDO> typeSpanList = null;
		long total = 0;
		try {
			total = typeSpanService.getTypeSpanCount(typeSpanDO);
			if (total <= pager.getOffset()) {
				pager.setPageNo(1L);
			}
			typeSpanDO.setPager(pager);
			typeSpanList = typeSpanService.getTypeSpanList(typeSpanDO);
			pager.setTotal(total);
			result.setDataObject(typeSpanList);
			result.setPager(pager);
		} catch (Exception e) {
			log.error(this.getClass()+".getTypeSpanList() error:",e);
		}
		responseJson(result);
	}
	/**
	 * 判断产品型号是否存在
	 * @author mb
	 * @param 
	 * @return
	 */
	@RequestMapping(value = "/checkTsTypeSpan")
	@ResponseBody
	public void checkTsTypeSpan(@ModelAttribute("pager") Pager pager,
			@ModelAttribute TypeSpanDO typeSpanDO,HttpServletRequest request) {
		JsonResult result = new  JsonResult() ;
		if(typeSpanService.checkTsTypeSpan(typeSpanDO.getTsTypeSpan())>0){
			responseJson(new JsonResult(false,ResultCodeConstants.ERROR_MSG_UNIQUE_TYPESPAN,"产品型号已经存在"));
			return;
		}
		responseJson(result);
	}
	/**
	 * 新增产品型号
	 * @author mb
	 * @param 
	 * @return
	 */
	@RequestMapping(value = "/addTypeSpan")
	@ResponseBody
	public void addTypeSpan(@ModelAttribute("pager") Pager pager,
			@ModelAttribute TypeSpanDO typeSpanDO,HttpServletRequest request) {
		JsonResult result = new  JsonResult() ;
		boolean flag = true;
		List<BomListDO> bomList = typeSpanDO.getBomList();
		for(int i=0;i<bomList.size()-1;i++){
			for(int j=i+1;j<bomList.size();j++){
				if(bomList.get(i).getBlFileMd5().equals(bomList.get(j).getBlFileMd5())&&
				   bomList.get(i).getBlFirmwareNumber().equals(bomList.get(j).getBlFirmwareNumber())&&
				   bomList.get(i).getBlFirmwareVersion().equals(bomList.get(j).getBlFirmwareVersion())&&
				   bomList.get(i).getBlHardwareNumber().equals(bomList.get(j).getBlHardwareNumber())&&
				   bomList.get(i).getBlHardwareVersion().equals(bomList.get(j).getBlHardwareVersion())&&
				   bomList.get(i).getBlForceUpdate()==bomList.get(j).getBlForceUpdate()){
					flag = false;
				}
			}
		}
		if(flag){
			if(!typeSpanService.addTypeSpan(typeSpanDO)){
				responseJson(new JsonResult(false,ResultCodeConstants.ERROR_MSG_ADD_TYPESPAN,"新增产品型号失败"));
				return;
			}
		}else{
			responseJson(new JsonResult(false,ResultCodeConstants.ERROR_MSG_REPEAT_BOMLIST,"bomList有重复"));
			return;
		}
		responseJson(result);
	}
	
	
}
