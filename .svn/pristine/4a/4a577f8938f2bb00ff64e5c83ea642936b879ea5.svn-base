package com.wanma.ims.service.impl;

import java.text.SimpleDateFormat;
import java.util.*;

import com.google.common.base.Function;
import com.google.common.collect.Maps;
import com.wanma.ims.common.domain.*;
import com.wanma.ims.common.domain.bo.IntegralAreaBO;
import com.wanma.ims.mapper.*;
import com.wanma.ims.util.DateUtil;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.wanma.ims.common.domain.bo.IntegralActivityAndRulesBO;
import com.wanma.ims.common.dto.BaseResultDTO;
import com.wanma.ims.service.IntegralActivityService;

@Service("integralActivityService")
public class IntegralActivityServiceImpl implements IntegralActivityService {

	private final Logger log = LoggerFactory.getLogger(this.getClass());
	@Autowired
    private IntegralActivityMapper integralActivityMapper;
	
	@Autowired
    private IntegralRulesMapper integralRulesMapper;
	
	@Autowired
    private IntegralRulesExtensionsMapper integralRulesExtensionsMapper;

	@Autowired
	private InitialMapper initialMapper;

	@Autowired
	private PowerStationMapper powerStationMapper;

	@Override
	public Long getIntegralActivityCount(IntegralActivityDO integralActivity) {
		return integralActivityMapper.getIntegralActivityCount(integralActivity);
	}
	
	@Override
	public List<IntegralActivityAndRulesBO> getIntegralActivityList(IntegralActivityDO integralActivity) {
		List<IntegralActivityAndRulesBO> resultList = integralActivityMapper.getIntegralActivityList(integralActivity);
		generalCityName(resultList);
		return resultList;
	}

	public void generalCityName(List<IntegralActivityAndRulesBO> resultList){
		Set<String> provinceSet = new HashSet<String>();
		Set<String> citySet = new HashSet<String>();
		for(IntegralActivityAndRulesBO integralActivityAndRulesBO : resultList){
			provinceSet.add(integralActivityAndRulesBO.getProvinceId());
			citySet.add(integralActivityAndRulesBO.getCityId());
		}
		List<String> provinceIdList = new ArrayList<String>();
		List<String> cityIdList = new ArrayList<String>();
		provinceIdList.addAll(provinceSet);
		cityIdList.addAll(citySet);
		List<ProvinceDO> provinceList = initialMapper.selectProvinceList(provinceIdList);
		List<CityDO> cityList = initialMapper.selectCityList(cityIdList,null);
		Map<String,String> provinceMap = new HashMap<String,String>();
		Map<String,String> cityMap = new HashMap<String,String>();
		for (ProvinceDO provinceDO : provinceList) {
			provinceMap.put(provinceDO.getProvinceId(), provinceDO.getProvinceName());
		}
		for (CityDO cityDO : cityList) {
			cityMap.put(cityDO.getCityId(),cityDO.getCityName());
		}
		List<PowerStationDO> powerStationList = powerStationMapper.selectPowerStationList(new PowerStationDO());
		Map<Long,String> powerStationMap = new HashMap<Long,String>();
		for (PowerStationDO powerStationDO : powerStationList) {
			powerStationMap.put(powerStationDO.getPowerstationId(), powerStationDO.getPowerstationName());
		}
		String provinceName = "", cityName = "", powerStationName = "";
		for (IntegralActivityAndRulesBO bo : resultList) {
			provinceName = provinceMap.get(bo.getProvinceId()) == null ? "" : provinceMap.get(bo.getProvinceId());
			cityName = cityMap.get(bo.getCityId()) == null ? "" : cityMap.get(bo.getCityId());
			powerStationName = powerStationMap.get(bo.getPowerStationId()) == null ? "" : powerStationMap.get(bo.getPowerStationId());
			bo.setAddressName(provinceName + cityName + powerStationName);
		}
	}


	@Override
	public BaseResultDTO modifyIntegralActivity(IntegralActivityAndRulesBO integralActivityAndRulesBO) throws Exception{
		BaseResultDTO baseResultDTO = new BaseResultDTO();
		
		if (integralActivityAndRulesBO.getModifier() == null) {
			integralActivityAndRulesBO.setModifier("");
		}
		if (integralActivityAndRulesBO.getGmtModified() == null) {
			integralActivityAndRulesBO.setGmtModified(new Date());
		}
		
		int result =  integralActivityMapper.modifyIntegralActivity(integralActivityAndRulesBO);
		if (result != 1) {
			log.error(this.getClass() + ".modifyIntegralActivity() error : 修改积分活动扩展属性失败!");
			baseResultDTO.setSuccess(false);
			baseResultDTO.setErrorDetail("修改积分活动扩展属性失败!");
		}

		if(integralActivityAndRulesBO.getStrStartDate() == null
				|| integralActivityAndRulesBO.getStrStartDate().equals("")){
			log.error(this.getClass() + ".addIntegralActivity() error : 积分活动开始时间不能为空!");
			baseResultDTO.setSuccess(false);
			baseResultDTO.setErrorDetail("积分活动开始时间不能为空！");
			return baseResultDTO;
		}
		if(integralActivityAndRulesBO.getStrEndDate() == null
				|| integralActivityAndRulesBO.getStrEndDate().equals("")){
			log.error(this.getClass() + ".addIntegralActivity() error : 积分活动结束时间不能为空!");
			baseResultDTO.setSuccess(false);
			baseResultDTO.setErrorDetail("积分活动结束时间不能为空！");
			return baseResultDTO;
		}
		Date startDate = DateUtil.parse(integralActivityAndRulesBO.getStrStartDate(), DateUtil.TYPE_COM_YMD);
		Date endDate = DateUtil.parse(integralActivityAndRulesBO.getStrEndDate(), DateUtil.TYPE_COM_YMD);

		//节假日和积分兑换优惠券，需要验证活动时间是否有重叠
		if(integralActivityAndRulesBO.getPkId().intValue() == 8 || integralActivityAndRulesBO.getPkId().intValue() == 6) {
			IntegralRulesDO qryIntegralRulesDO = new IntegralRulesDO();
			qryIntegralRulesDO.setIntegralActivityId(integralActivityAndRulesBO.getPkId());
			qryIntegralRulesDO.setStartDate(startDate);
			qryIntegralRulesDO.setEndDate(endDate);
			Long num = integralRulesMapper.getRepeatIntegralRulesCount(qryIntegralRulesDO);
			if (num != null && num.intValue() > 0) {
				log.error(this.getClass() + ".addIntegralActivity() error : 积分活动时间与现有的积分活动时间重叠!");
				baseResultDTO.setSuccess(false);
				baseResultDTO.setErrorDetail("积分活动时间与现有的积分活动时间重叠！");
				return baseResultDTO;
			}
		}

		IntegralRulesDO qryIntegralRulesDO = new IntegralRulesDO();
		qryIntegralRulesDO.setPkId(integralActivityAndRulesBO.getIntegralRulesId());
		List<IntegralRulesDO> integralRulesList = integralRulesMapper.getIntegralRulesList(qryIntegralRulesDO);
		if(integralRulesList == null){
			log.error(this.getClass() + ".addIntegralActivity() error : 修改积分活动失败!");
			baseResultDTO.setSuccess(false);
			baseResultDTO.setErrorDetail("修改积分活动失败！");
			return baseResultDTO;
		}else{
			IntegralRulesDO integralRulesDO = integralRulesList.get(0);
			integralRulesDO.setPkId(integralActivityAndRulesBO.getIntegralRulesId());
			integralRulesDO.setHighestPriority(integralActivityAndRulesBO.getHighestPriority());
			integralRulesDO.setActivityStatus(integralActivityAndRulesBO.getActivityStatus());
			integralRulesDO.setFixedIntegralValue(integralActivityAndRulesBO.getFixedIntegralValue());
			integralRulesDO.setRatioIntegralValue(integralActivityAndRulesBO.getRatioIntegralValue());
			integralRulesDO.setStartDate(startDate);
			integralRulesDO.setEndDate(endDate);
			integralRulesDO.setEffectiveTimes(integralActivityAndRulesBO.getEffectiveTimes());
			integralRulesDO.setIsWhole(integralActivityAndRulesBO.getIsWhole());
			integralRulesDO.setProvinceId(integralActivityAndRulesBO.getProvinceId());
			integralRulesDO.setCityId(integralActivityAndRulesBO.getCityId());
			integralRulesDO.setPowerStationId(integralActivityAndRulesBO.getPowerStationId());
			integralRulesDO.setMinValue(integralActivityAndRulesBO.getMinValue());
			integralRulesDO.setIsChoice(integralActivityAndRulesBO.getIsChoice());
			integralRulesDO.setChoiceMoney(integralActivityAndRulesBO.getChoiceMoney());
			integralRulesDO.setIsShareChoice(integralActivityAndRulesBO.getIsShareChoice());
			integralRulesDO.setShareIntegralValue(integralActivityAndRulesBO.getShareIntegralValue());
			integralRulesDO.setShareChoice(integralActivityAndRulesBO.getShareChoice());
			integralRulesDO.setContents(integralActivityAndRulesBO.getContents() == null ? "" : integralActivityAndRulesBO.getContents());
			integralRulesDO.setModifier(integralActivityAndRulesBO.getModifier());
			integralRulesDO.setGmtModified(integralActivityAndRulesBO.getGmtModified());
			result = integralRulesMapper.modifyIntegralRules(integralRulesDO);
			if (result != 1) {
				log.error(this.getClass() + ".addIntegralActivity() error : 修改积分活动-积分规则失败!");
				baseResultDTO.setSuccess(false);
				baseResultDTO.setErrorDetail("修改积分活动-积分规则失败！");
				return baseResultDTO;
			}

			//积分规则扩展属性
			Long pkId = integralRulesDO.getPkId();
			List<IntegralRulesExtensionsDO> extList;
			IntegralRulesExtensionsDO qryIntegralRulesExtensionsDO = new IntegralRulesExtensionsDO();
			qryIntegralRulesExtensionsDO.setPkId(pkId);
			integralRulesExtensionsMapper.removeIntegralRulesExtensions(qryIntegralRulesExtensionsDO);
			if (pkId.intValue() == 2) {
				//充电消费
				String[] electricPileId = integralActivityAndRulesBO.getElectricPileIds().split(",");
				extList = new ArrayList<IntegralRulesExtensionsDO>();
				IntegralRulesExtensionsDO extDO;
				for (String str : electricPileId) {
					extDO = new IntegralRulesExtensionsDO();
					extDO.setIntegralRulesId(pkId);
					extDO.setElectricPileId(Long.getLong(str));
					extList.add(extDO);
				}
				integralRulesExtensionsMapper.batchAddIntegralRulesExtensions(extList);
			}else if (pkId.intValue() == 9) {
				//积分兑换
				extList = integralActivityAndRulesBO.getExtList();

				integralRulesExtensionsMapper.batchAddIntegralRulesExtensions(extList);
			}
		}

		return baseResultDTO;
	}

	@Override
	public BaseResultDTO addIntegralActivity(IntegralActivityAndRulesBO integralActivityAndRulesBO) throws Exception {
		BaseResultDTO baseResultDTO = new BaseResultDTO();
		IntegralActivityDO integralActivity = new IntegralActivityDO();
		int result = 0;

		if(integralActivityAndRulesBO == null || integralActivityAndRulesBO.getPkId() == null){
			log.error(this.getClass() + ".addIntegralActivity() error : 积分活动id不能为空!");
			baseResultDTO.setSuccess(false);
			baseResultDTO.setErrorDetail("积分活动id不能为空！");
			return baseResultDTO;
		}
		Long pkId = integralActivityAndRulesBO.getPkId();

		if(integralActivityAndRulesBO.getStrStartDate() == null
				|| integralActivityAndRulesBO.getStrStartDate().equals("")){
			log.error(this.getClass() + ".addIntegralActivity() error : 积分活动开始时间不能为空!");
			baseResultDTO.setSuccess(false);
			baseResultDTO.setErrorDetail("积分活动开始时间不能为空！");
			return baseResultDTO;
		}
		if(integralActivityAndRulesBO.getStrEndDate() == null
				|| integralActivityAndRulesBO.getStrEndDate().equals("")){
			log.error(this.getClass() + ".addIntegralActivity() error : 积分活动结束时间不能为空!");
			baseResultDTO.setSuccess(false);
			baseResultDTO.setErrorDetail("积分活动结束时间不能为空！");
			return baseResultDTO;
		}
		Date startDate = DateUtil.parse(integralActivityAndRulesBO.getStrStartDate(), DateUtil.TYPE_COM_YMD);
		Date endDate = DateUtil.parse(integralActivityAndRulesBO.getStrEndDate(), DateUtil.TYPE_COM_YMD);

		//节假日和积分兑换优惠券，需要验证活动时间是否有重叠
		if(pkId.intValue() == 8 || pkId.intValue() == 6) {
			IntegralRulesDO qryIntegralRulesDO = new IntegralRulesDO();
			qryIntegralRulesDO.setIntegralActivityId(pkId);
			qryIntegralRulesDO.setStartDate(startDate);
			qryIntegralRulesDO.setEndDate(endDate);
			Long num = integralRulesMapper.getRepeatIntegralRulesCount(qryIntegralRulesDO);
			if (num != null && num.intValue() > 0) {
				log.error(this.getClass() + ".addIntegralActivity() error : 积分活动时间与现有的积分活动时间重叠!");
				baseResultDTO.setSuccess(false);
				baseResultDTO.setErrorDetail("积分活动时间与现有的积分活动时间重叠！");
				return baseResultDTO;
			}
		}

		//积分规则
		IntegralRulesDO integralRulesDO = new IntegralRulesDO();
		integralRulesDO.setIntegralActivityId(pkId);
		integralRulesDO.setHighestPriority(integralActivityAndRulesBO.getHighestPriority());
		integralRulesDO.setActivityStatus(integralActivityAndRulesBO.getActivityStatus());
		integralRulesDO.setFixedIntegralValue(integralActivityAndRulesBO.getFixedIntegralValue());
		integralRulesDO.setRatioIntegralValue(integralActivityAndRulesBO.getRatioIntegralValue());
		integralRulesDO.setStartDate(startDate);
		integralRulesDO.setEndDate(endDate);
		integralRulesDO.setEffectiveTimes(integralActivityAndRulesBO.getEffectiveTimes());
		integralRulesDO.setIsWhole(integralActivityAndRulesBO.getIsWhole());
		integralRulesDO.setProvinceId(integralActivityAndRulesBO.getProvinceId());
		integralRulesDO.setCityId(integralActivityAndRulesBO.getCityId());
		integralRulesDO.setPowerStationId(integralActivityAndRulesBO.getPowerStationId());
		integralRulesDO.setMinValue(integralActivityAndRulesBO.getMinValue());
		integralRulesDO.setIsChoice(integralActivityAndRulesBO.getIsChoice());
		integralRulesDO.setChoiceMoney(integralActivityAndRulesBO.getChoiceMoney());
		integralRulesDO.setIsShareChoice(integralActivityAndRulesBO.getIsShareChoice());
		integralRulesDO.setShareIntegralValue(integralActivityAndRulesBO.getShareIntegralValue());
		integralRulesDO.setShareChoice(integralActivityAndRulesBO.getShareChoice());
		integralRulesDO.setContents(integralActivityAndRulesBO.getContents() == null ? "" : integralActivityAndRulesBO.getContents());
		integralRulesDO.setCreator(integralActivityAndRulesBO.getCreator());
		integralRulesDO.setModifier(integralActivityAndRulesBO.getModifier());
		integralRulesDO.setGmtCreate(integralActivityAndRulesBO.getGmtCreate());
		integralRulesDO.setGmtModified(integralActivityAndRulesBO.getGmtModified());
		result = integralRulesMapper.addIntegralRules(integralRulesDO);
		if (result != 1) {
			log.error(this.getClass() + ".addIntegralActivity() error : 增加积分活动-积分规则失败!");
			baseResultDTO.setSuccess(false);
			baseResultDTO.setErrorDetail("增加积分活动-积分规则失败！");
			return baseResultDTO;
		}
		
		//积分规则扩展属性
		List<IntegralRulesExtensionsDO> extList;
		if (pkId.intValue() == 2) {
			//充电消费
			String[] electricPileId = integralActivityAndRulesBO.getElectricPileIds().split(",");
			extList = new ArrayList<IntegralRulesExtensionsDO>();
			IntegralRulesExtensionsDO extDO;
			for (String str : electricPileId) {
				extDO = new IntegralRulesExtensionsDO();
				extDO.setIntegralRulesId(integralRulesDO.getPkId());
				extDO.setElectricPileId(Long.parseLong(str));
				extList.add(extDO);
			}
			integralRulesExtensionsMapper.batchAddIntegralRulesExtensions(extList);
		}else if (pkId.intValue() == 9) {
			//积分兑换
			extList = integralActivityAndRulesBO.getExtList();
			
			integralRulesExtensionsMapper.batchAddIntegralRulesExtensions(extList);
		}
		
		return baseResultDTO;
	}

	@Override
	public BaseResultDTO deleteIntegralActivity(IntegralActivityDO integralActivity) throws Exception {
		BaseResultDTO baseResultDTO = new BaseResultDTO();
		
		int result =  integralActivityMapper.deleteIntegralActivity(integralActivity);
		if (result != 1) {
			log.error(this.getClass() + ".deleteIntegralActivity() error : 删除积分活动扩展属性失败!");
			baseResultDTO.setSuccess(false);
			baseResultDTO.setErrorDetail("删除积分活动扩展属性失败！");
		}
		return baseResultDTO;
	}

	@Override
	public List<ProvinceDO> getStationAndPile(IntegralActivityAndRulesBO integralActivityAndRulesBO,
											  UserDO loginUser) throws Exception {
		//选中的电桩
		List<IntegralActivityAndRulesBO> integralRulesDOList;
		Map<Long, IntegralActivityAndRulesBO> relaMap;
		if(integralActivityAndRulesBO.getPkId() == null){
			integralRulesDOList = new ArrayList<IntegralActivityAndRulesBO>();
			relaMap = new HashMap<Long, IntegralActivityAndRulesBO>();
		}else {
			IntegralActivityDO qryIntegralActivity = new IntegralActivityDO();
			qryIntegralActivity.setPkId(integralActivityAndRulesBO.getPkId());
			qryIntegralActivity.setIntegralRulesId(integralActivityAndRulesBO.getIntegralRulesId());
			integralRulesDOList = integralActivityMapper.getIntegralActivityAndRulesList(qryIntegralActivity);
			relaMap = Maps.uniqueIndex(integralRulesDOList, new Function<IntegralActivityAndRulesBO, Long>() {
				@Override
				public Long apply(IntegralActivityAndRulesBO input) {
					return input.getElectricPileId();
				}
			});
		}

		List<ProvinceDO> resultList = new ArrayList<>();
		Map<String, ProvinceDO> provinceMap = new HashMap<>();
		Map<String, CityDO> cityMap = new HashMap<>();
		ProvinceDO provinceDO;
		CityDO cityDO;
		List<IntegralAreaBO> tempProvinceList = integralRulesMapper.getIntegralRulesProvince(new IntegralRulesDO());
		List<IntegralAreaBO> tempCityList = integralRulesMapper.getIntegralRulesCity(new IntegralRulesDO());

		for (IntegralAreaBO province : tempProvinceList) {
			provinceDO = new ProvinceDO();
			provinceDO.setId(Long.parseLong(province.getProvinceCode()));
			provinceDO.setList(new ArrayList<CityDO>());
			provinceDO.setIsSelected(false);
			provinceDO.setName(province.getProvinceName());
			provinceMap.put(province.getProvinceCode(), provinceDO);
			resultList.add(provinceDO);
		}
		for (IntegralAreaBO city : tempCityList) {
			cityDO = new CityDO();
			cityDO.setId(Long.parseLong(city.getCityCode()));
			cityDO.setList(new ArrayList<PowerStationDO>());
			cityDO.setIsSelected(false);
			cityDO.setName(city.getCityName());
			cityMap.put(city.getCityCode(), cityDO);
			if(provinceMap.containsKey(city.getProvinceCode())){
				provinceMap.get(city.getProvinceCode()).getList().add(cityDO);
			}
		}

		List<PowerStationDO> tempPowerStationList = new ArrayList<PowerStationDO>();
		List<ElectricPileDO> tempElectricPileList = new ArrayList<ElectricPileDO>();
		IntegralAreaBO tempPowerStationDO;
		IntegralAreaBO tempElectricPileDO;
		PowerStationDO powerStationDO;
		ElectricPileDO electricPileDO;
		boolean isSelected = false;
		int checkedNum;
		int i = 0;
		int j = 0;
		int count = 0;
		int count2 = 0;
		List<IntegralAreaBO> powerStationList = integralRulesMapper.getIntegralRulesPowerStation(new IntegralRulesDO());
		//选中的电站
		Map<Long, IntegralAreaBO> powerStationMap = Maps.uniqueIndex(powerStationList, new Function<IntegralAreaBO, Long>() {
			@Override
			public Long apply(IntegralAreaBO input) {
				return input.getPowerStationId();
			}
		});

		List<IntegralAreaBO> electricPileList = integralRulesMapper.getIntegralRulesElectricPile(new IntegralRulesDO());
		for (ProvinceDO tempProvince : resultList) {
			for (CityDO tempCity : tempProvince.getList()) {
				tempPowerStationList = new ArrayList<PowerStationDO>();
				for (; i < powerStationList.size(); i++) {
					tempPowerStationDO = powerStationList.get(i);
					if (tempCity.getId().equals(Long.parseLong(tempPowerStationDO.getCityCode()))) {
						powerStationDO = new PowerStationDO();
						powerStationDO.setId(tempPowerStationDO.getPowerStationId());
						powerStationDO.setName(tempPowerStationDO.getPowerStationName());
						powerStationDO.setIsSelected(false);
						tempElectricPileList = new ArrayList<ElectricPileDO>();
						checkedNum = 0;
						for (; j < electricPileList.size(); j++) {
							tempElectricPileDO = electricPileList.get(j);
							if (tempPowerStationDO.getPowerStationId().equals(tempElectricPileDO.getPowerStationId())) {
								electricPileDO = new ElectricPileDO();
								electricPileDO.setId(tempElectricPileDO.getElectricPileId());
								electricPileDO.setName(tempElectricPileDO.getElectricPileName());
								isSelected = false;
								if (relaMap.containsKey(tempElectricPileDO.getElectricPileId())) {
									checkedNum++;
									isSelected = true;
								}
								electricPileDO.setIsSelected(isSelected);
								tempElectricPileList.add(electricPileDO);
								count++;
							} else {
								if (powerStationMap.containsKey(powerStationDO.getPowerstationId())
										&& checkedNum == tempElectricPileList.size() && checkedNum != 0) {
									powerStationDO.setIsSelected(true);
								}
								powerStationDO.setList(tempElectricPileList);
								checkedNum = 0;
								break;
							}
							powerStationDO.setList(tempElectricPileList);
						}
						tempPowerStationList.add(powerStationDO);
						count2++;
					} else {
						tempCity.setList(tempPowerStationList);
						break;
					}
					tempCity.setList(tempPowerStationList);
				}
			}
		}

		return resultList;
	}
}