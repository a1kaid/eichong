package com.wanma.ims.filter;

import java.io.IOException;
import java.io.PrintWriter;

import javax.servlet.Filter;
import javax.servlet.FilterChain;
import javax.servlet.FilterConfig;
import javax.servlet.ServletException;
import javax.servlet.ServletRequest;
import javax.servlet.ServletResponse;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import net.sf.json.JSONObject;

import org.apache.log4j.Logger;

import com.wanma.ims.constants.ResultCodeConstants;
import com.wanma.ims.controller.result.JsonResult;


public class LoginFilter implements Filter {
    Logger log = Logger.getLogger(this.getClass());
    private String[] security_uri_array;

    public LoginFilter() {
    }

    public void init(FilterConfig fConfig) throws ServletException {
        String security_uri_conf = fConfig.getInitParameter("SECURITY_URI");
        security_uri_array = security_uri_conf.split(",");
    }

    public void doFilter(ServletRequest request, ServletResponse response,
                         FilterChain chain) throws IOException, ServletException {
        HttpServletRequest req = (HttpServletRequest) request;
        HttpServletResponse resp = (HttpServletResponse) response;
        resp.setHeader("Access-Control-Allow-Origin", "*");
        resp.setHeader("Access-Control-Allow-Methods", "POST, GET, OPTIONS, DELETE");
        resp.setHeader("Access-Control-Max-Age", "3600");
        resp.setHeader("Access-Control-Allow-Headers", "x-requested-with");
        // 设置编码
        req.setCharacterEncoding("UTF-8");
        resp.setCharacterEncoding("UTF-8");
        HttpSession sessison = req.getSession();

        request.setAttribute("webroot", req.getContextPath());

        boolean needSecurity = false;
        // 判断请求URI是否在配置的需要登录验证的URI列表中
        for (String sUri : security_uri_array) {
            if (req.getRequestURI().startsWith((req.getContextPath() + sUri.replace("*", "")))) {
                needSecurity = true;
                break;
            }
        }
        if (!needSecurity
                || (needSecurity && sessison.getAttribute("ims_user") != null)) {
            chain.doFilter(request, response);
        } else {
            // 登录失败或会话超时
            if ("XMLHttpRequest".equals(req.getHeader("X-Requested-With"))
                    || req.getParameter("ajax") != null) {
                // 设置会话超时
                PrintWriter out = null;
                response.setContentType("text/json; charset=UTF-8");
                JsonResult result = new JsonResult();
                result.setSuccess(false);
                result.setStatus(ResultCodeConstants.SESSION_OUT);
                result.setMsg("会话超时");
                JSONObject jsonObj = JSONObject.fromObject(result);
                String json = jsonObj.toString();
                out = response.getWriter();
                out.print(json);
                out.flush();
                out.close();
            } else {
                resp.sendRedirect(req.getContextPath() + "/tologin.do");
            }
        }
    }

    public void destroy() {

    }

}
