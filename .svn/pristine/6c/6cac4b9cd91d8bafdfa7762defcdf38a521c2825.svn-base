package com.wanma.ims.controller.fin;

import java.util.ArrayList;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.wanma.ims.common.domain.CompanyDO;
import com.wanma.ims.common.domain.FinAccountDO;
import com.wanma.ims.common.domain.UserCardDO;
import com.wanma.ims.common.domain.UserDO;
import com.wanma.ims.common.domain.base.Pager;
import com.wanma.ims.common.domain.bo.AccountBalanceBO;
import com.wanma.ims.common.dto.BaseResultDTO;
import com.wanma.ims.constants.ResultCodeConstants;
import com.wanma.ims.controller.BaseController;
import com.wanma.ims.controller.result.JsonException;
import com.wanma.ims.controller.result.JsonResult;
import com.wanma.ims.core.SessionMgr;
import com.wanma.ims.service.CompanyService;
import com.wanma.ims.service.FinAccountService;

/**
 * 资金账户
 */
@RequestMapping("/fin")
@Controller
public class FinAccountController extends BaseController{
	
	private final Logger log = LoggerFactory.getLogger(this.getClass());

	@Autowired
	private FinAccountService finAccountService;
	@Autowired
	private CompanyService companyService;
	
	/**
	* <p>Description: 获取公司首页中的余额和状态</p>
	* @param
	* @author bingo
	* @date 2017-7-10
	 */
	@RequestMapping(value = "/getFinAccountBalance4Cpy")
	@ResponseBody	
	public void getFinAccountBalance4Cpy(@RequestParam("accountId") String accountId, Model model,HttpServletRequest request) throws Exception{
		JsonResult batchResult = new JsonResult();
		
		FinAccountDO finAccountDO = finAccountService.getFinAccountBalance4Cpy(accountId);
		if (finAccountDO == null) {
			finAccountDO = new FinAccountDO();
		}
		batchResult.setDataObject(finAccountDO);
		
		responseJson(batchResult);
	}
	
	/**
	* <p>Description: 获取用户首页中资金账户数据</p>
	* @param
	* @author bingo
	* @date 2017-6-29
	 */
	@RequestMapping(value = "/getFinAccount4User")
	@ResponseBody	
	public void getFinAccount4User(@ModelAttribute AccountBalanceBO accountBalance, Model model,HttpServletRequest request) throws Exception{
		JsonResult batchResult = new JsonResult();
		
		List<FinAccountDO> finAccountList = finAccountService.getFinAccount4User(accountBalance);
		if (finAccountList == null) {
			finAccountList = new ArrayList<FinAccountDO>();
		}
		batchResult.setDataObject(finAccountList);
		
		responseJson(batchResult);
	}
	
	/**
	* <p>Description: 获取卡首页中资金账户数据</p>
	* @param
	* @author bingo
	* @date 2017-6-29
	 */
	@RequestMapping(value = "/getFinAccount4Card")
	@ResponseBody	
	public void getFinAccount4Card(@ModelAttribute UserCardDO userCard, Model model,HttpServletRequest request) throws Exception{
		JsonResult batchResult = new JsonResult();
		
		List<FinAccountDO> finAccountList = finAccountService.getFinAccount4Card(userCard);
		if (finAccountList == null) {
			finAccountList = new ArrayList<FinAccountDO>();
		}
		batchResult.setDataObject(finAccountList);
		
		responseJson(batchResult);
	}
	
	/**
	* <p>Description: 获取资金账户列表</p>
	* @param
	* @author bingo
	* @date 2017-6-16
	 */
	@RequestMapping(value = "/getFinAccount")
	@ResponseBody
	public void getFinAccountList(@ModelAttribute("pager") Pager pager,
			@ModelAttribute FinAccountDO finAccount, Model model,HttpServletRequest request){
		JsonResult batchResult = new JsonResult();
		Long total = finAccountService.getFinAccountCount(finAccount);
		if (total <= pager.getOffset()) {
			pager.setPageNo(1L);
		}
		pager.setTotal(total);
		finAccount.setPager(pager);
		
		List<FinAccountDO> FinAccountList = finAccountService.getFinAccountList(finAccount);
		if (FinAccountList == null) {
			FinAccountList = new ArrayList<FinAccountDO>();
		}
		batchResult.setDataObject(FinAccountList);
		batchResult.setPager(pager);
		
		responseJson(batchResult);
	}	
	
	/**
	* <p>Description: 修改资金账户</p>
	* @param
	* @author bingo
	* @date 2017-6-16
	 */
	@RequestMapping(value = "/modifyFinAccount")
	@ResponseBody
	public void modifyFinAccount(@ModelAttribute FinAccountDO finAccount, Model model, HttpServletRequest request) {
		//取当前登录用户
		UserDO user = SessionMgr.getWebUser(request);
		if (user == null) {
			log.error(this.getClass() + ".modifyFinAccount() error : " + ResultCodeConstants.ERROR_MSG_EMPTY_SESSION_USER);
			responseJson(new JsonResult(false, ResultCodeConstants.FAILED, ResultCodeConstants.ERROR_MSG_EMPTY_SESSION_USER));
			return;
		}
		
		int result = 0;
		try {
			result = finAccountService.modifyFinAccount(finAccount, user);
		} catch (Exception e) {
			log.error(this.getClass() + ".modifyFinAccount() error : ", e);
		}
		if (result == 0) {
			log.error(this.getClass() + ".modifyFinAccount() error : " + ResultCodeConstants.ERROR_MSG_ERROR_MODIFY);
			responseJson(new JsonResult(false, ResultCodeConstants.FAILED, ResultCodeConstants.ERROR_MSG_ERROR_MODIFY));
		}else if (result == 2) {
			log.error(this.getClass() + ".modifyFinAccount() error : " + ResultCodeConstants.ERROR_MSG_EMPTY_MODIFY_ACCOUNT);
			responseJson(new JsonResult(false, ResultCodeConstants.FAILED, ResultCodeConstants.ERROR_MSG_EMPTY_MODIFY_ACCOUNT));
		}else {
			responseJson(new JsonResult());
		}
	}
	
	
	/**
	* <p>Description: 删除资金账户</p>
	* @param
	* @author bingo
	* @date 2017-6-16
	 */
	@RequestMapping(value = "/removeFinAccount")
	@ResponseBody
	public void removeFinAccount(@ModelAttribute FinAccountDO finAccount, Model model, HttpServletRequest request) {
		int result = 0;
		try {
			result = finAccountService.removeFinAccount(finAccount);
		} catch (Exception e) {
			log.error(this.getClass() + ".removeFinAccount() error : ", e);
		}
		
		if (result == 0) {
			log.error(this.getClass() + ".removeFinAccount() error : " + ResultCodeConstants.ERROR_MSG_ERROR_REMOVE);
			responseJson(new JsonResult(false, ResultCodeConstants.FAILED, ResultCodeConstants.ERROR_MSG_ERROR_REMOVE));
		}else {
			responseJson(new JsonResult());
		}
	}
	
	/**
     * 导出资金账户信息
     */
    @RequestMapping(value = "/exportFinAccount")
    @ResponseBody
    public void exportFinAccount(HttpServletResponse response, FinAccountDO finAccount) {
        JsonResult result = new JsonResult();
        UserDO loginUser = getCurrentLoginUser();
        try {
            BaseResultDTO resultDTO = finAccountService.exportFinAccount(response, finAccount, loginUser);
            if (resultDTO.isFailed()) {
                result = new JsonResult(false, resultDTO.getResultCode(), resultDTO.getErrorDetail());
            }
            responseJson(result);
        } catch (Exception e) {
        	log.error(this.getClass()+".exportFinAccount() error:",e);
            responseJson(new JsonException("导出资金账户信息失败！"));
        }
    }
    
    /**
     * 大账户为小账户等额配资 
     */
    @RequestMapping(value = "/equalAllocation")
    @ResponseBody
    public void equalAllocation(CompanyDO company,FinAccountDO finAccount,HttpServletRequest request ){
    	JsonResult result = new JsonResult();
    	UserDO loginUser = getCurrentLoginUser();
    	if (loginUser == null) {
			log.error(this.getClass() + ".modifyFinAccount() error : " + ResultCodeConstants.ERROR_MSG_EMPTY_SESSION_USER);
			responseJson(new JsonResult(false, ResultCodeConstants.FAILED, ResultCodeConstants.ERROR_MSG_EMPTY_SESSION_USER));
			return;
		}
    	try {
    		if(finAccount.getAllocationAmount()==null||"".equals(finAccount.getAllocationAmount())){
    			responseJson(new JsonResult(false, ResultCodeConstants.FAILED, "配资金额不能为空"));
    			return;
    		}
			company = companyService.getCompanyByCpyInfo(company);
			BaseResultDTO resultDTO = finAccountService.equalAllocation(company,finAccount,loginUser);
    		if(resultDTO.isFailed()){
    			  result = new JsonResult(false, resultDTO.getResultCode(), resultDTO.getErrorDetail());
    		}
		} catch (Exception e) {
			log.error(this.getClass()+".equalAllocation() error:",e);
		}
    	responseJson(result);
    } 
    
    /**
     * 大账户为小账户单独配资
     */
    @RequestMapping(value = "/separateAllocation")
    @ResponseBody
    public void separateAllocation(CompanyDO company,FinAccountDO finAccount,HttpServletRequest request ){
    	JsonResult result = new JsonResult();
    	UserDO loginUser = getCurrentLoginUser();
    	if (loginUser == null) {
			log.error(this.getClass() + ".modifyFinAccount() error : " + ResultCodeConstants.ERROR_MSG_EMPTY_SESSION_USER);
			responseJson(new JsonResult(false, ResultCodeConstants.FAILED, ResultCodeConstants.ERROR_MSG_EMPTY_SESSION_USER));
			return;
		}
    	try {
    		if(finAccount.getAllocationAmount()==null||"".equals(finAccount.getAllocationAmount())){
    			responseJson(new JsonResult(false, ResultCodeConstants.FAILED, "配资金额不能为空"));
    			return;
    		}
    		if(finAccount.getAccountNO()==null||"".equals(finAccount.getAccountNO())){
    			responseJson(new JsonResult(false, ResultCodeConstants.FAILED, "小账户资金账号不能为空"));
    			return;
    		}
			company = companyService.getCompanyByCpyInfo(company);
			BaseResultDTO resultDTO = finAccountService.separateAllocation(company,finAccount,loginUser);
    		if(resultDTO.isFailed()){
    			  result = new JsonResult(false, resultDTO.getResultCode(), resultDTO.getErrorDetail());
    		}
		} catch (Exception e) {
			log.error(this.getClass()+".separateAllocation() error:",e);
		}
    	responseJson(result);
    }
    
    /**
	* <p>Description: 修改大账户预警金额</p>
	* @param
	* @author bingo
	* @date 2017-8-25
	 */
	@RequestMapping(value = "/modifyFinAccountWarn")
	@ResponseBody
	public void modifyFinAccountWarn(@ModelAttribute FinAccountDO finAccount, Model model, HttpServletRequest request) {
		//取当前登录用户
		UserDO user = SessionMgr.getWebUser(request);
		if (user == null) {
			log.error(this.getClass() + ".modifyFinAccountWarn() error : " + ResultCodeConstants.ERROR_MSG_EMPTY_SESSION_USER);
			responseJson(new JsonResult(false, ResultCodeConstants.FAILED, ResultCodeConstants.ERROR_MSG_EMPTY_SESSION_USER));
			return;
		}
		
		BaseResultDTO baseResultDTO = new BaseResultDTO();
		try {
			baseResultDTO = finAccountService.modifyFinAccountWarn(finAccount, user);
		} catch (Exception e) {
			log.error(this.getClass() + ".modifyFinAccountWarn() error : ", e);
		}
		
		if(!baseResultDTO.isSuccess()){
			responseJson(new JsonResult(false, ResultCodeConstants.FAILED, baseResultDTO.getErrorDetail()));
		}else {
			responseJson(new JsonResult());
		}
	}
}
