package com.wanma.ims.service.impl;

import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import org.apache.commons.lang.StringUtils;
import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.wanma.ims.common.CommonConsts;
import com.wanma.ims.common.SessionMgr;
import com.wanma.ims.common.WanmaConstants;
import com.wanma.ims.mapper.RoleMapper;
import com.wanma.ims.mapper.UserRoleMapper;
import com.wanma.ims.model.MenuDO;
import com.wanma.ims.model.RoleDO;
import com.wanma.ims.model.UserDO;
import com.wanma.ims.model.UserRoleDO;
import com.wanma.ims.service.MenuService;
import com.wanma.ims.service.RoleService;
@Service
public class RoleServiceImpl implements RoleService {

	// 日志输出对象
	private static Logger log = Logger.getLogger(RoleServiceImpl.class);

	@Autowired
	private RoleMapper roleMapper;
	
	@Autowired
	UserRoleMapper userRoleMapper;
	@Autowired
	MenuService menuService;

	
	@Override
	public List<RoleDO> getRoleListByUserId(Long userId) {
		return roleMapper.selectRoleListByUserId(userId);
	}
	
	@Override
	public Long countRoleList(UserDO userDO) {
		Long total = 0L;
		switch (userDO.getUserLevel()) {
		case WanmaConstants.USER_LEVEL_SUPER:
			total =  roleMapper.countSubRoleListByAdmin(userDO);
			break;
		case WanmaConstants.USER_LEVEL_ADMIN:
			total =  roleMapper.countSubRoleListByAdmin(userDO);
			break;
		case WanmaConstants.USER_LEVEL_WORK:
			total = roleMapper.countSubRoleListByOperatorId(userDO);
			break;
		default:
			total = roleMapper.countSubRoleListByCreateUserId(userDO);
			break;
		}
		return total;
	}
	
	@Override
	public List<RoleDO> getRoleListPage(UserDO userDO) {
		List<RoleDO> roleList = null;
		switch (userDO.getUserLevel()) {
		 //超级管理员可以查看自己等级及以下的角色
		case WanmaConstants.USER_LEVEL_SUPER:
			roleList = roleMapper.selectSubRoleListByAdmin(userDO);
			break;
		 //普通管理员可以查看自己等级及以下的角色
		case WanmaConstants.USER_LEVEL_ADMIN:
			roleList = roleMapper.selectSubRoleListByAdmin(userDO);
			break;
		 //渠道公司业务员、桩主业务员查看自己等级及以下的角色	
		case WanmaConstants.USER_LEVEL_WORK:
			roleList = roleMapper.selectSubRoleListByOperatorId(userDO);
			break;
		default:
			roleList = roleMapper.selectSubRoleListByCreateUserId(userDO);
			break;
	  }
		return roleList;
	}

	@Override
	public void initRolesAndMenus(HttpServletRequest request) {
		String roleIds = ""; 
		List<RoleDO> roleList = null;
		UserDO loginUser = SessionMgr.getWebUser(request);
		if (WanmaConstants.USER_LEVEL_SUPER != loginUser.getUserLevel()) {
			roleList = roleMapper.selectRoleListByUserId(loginUser.getUserId());
			roleIds = StringUtils.join(roleList, ",");
		}
		List<MenuDO> menuList = menuService.getMenuListByRoleIds(roleIds, loginUser.getUserLevel());
		//添加到session缓存
		SessionMgr.addUserRoles(request, roleList);
		SessionMgr.addUserMenus(request, menuList);
	}
	
	@Override
	public RoleDO getRoleById(String roleId) {
		return roleMapper.selectRoleById(roleId);
	}
	
	@Override
	public boolean addRole(RoleDO roleDO, String menuIds) {
		boolean flag = true;
		if(roleMapper.insertRole(roleDO) > 0){
			roleMapper.updateRoleMenuRela(roleDO.getRoleId(),menuIds);
		}
		return flag;
	}
	/********************************************以下暂时不可用*************************/
	
	
	/**
	 * 取得角色信息
	 * 
	 * @author yangweir
	 * @since Version 1.0
	 * @param roleId
	 *            角色ID
	 * @return RoleModel 角色信息
	 * @throws 无
	 */

	

	/**
	 * 编辑角色
	 * 
	 * @author yangweir
	 * @since Version 1.0
	 * @param RoleDO
	 *            角色信息
	 * @param userRoleList
	 *            角色用户列表
	 * @return String 处理结果标识
	 * @throws 无
	 */
	public String modifyRole(RoleDO role, List<UserRoleDO> userRoleList) {
//		// 更新处理结果
//		String processResult = CommonConsts.PROCESS_STATUS_OK;
//		try {
//			// 调用DAO执行角色更新处理
//			roleMapper.modifyRole(role);
//			if (userRoleList != null && userRoleList.size() > 0) {
//				// 角色用户追加/删除处理
//				for (UserRole userRoleModel : userRoleList) {
//					// 处理分类
//					String processType = userRoleModel.getPrcessFlg();
//					if (CommonConsts.PROCESS_FLG_ADD.equals(processType)) {
//						// 调用DAO执行角色用户添加处理
//						userRoleMapper.addUserRole(userRoleModel);
//					}
//					if (CommonConsts.PROCESS_FLG_DELETE.equals(processType)) {
//						// 调用DAO执行角色用户添加处理
//						userRoleMapper.removeUserRole(userRoleModel);
//					}
//				}
//			}
//		} catch (Exception e) {
//			// 返回处理错误标识
//			processResult = CommonConsts.PROCESS_STATUS_NG;
//			// 登录日志信息
//			log.error(e.getLocalizedMessage());
//		}
//
//		// 返回更新处理结果
//		return processResult;
		return "";
	}

	/**
	 * 删除角色
	 * 
	 * @author yangweir
	 * @since Version 1.0
	 * @param roleId
	 *            角色ID
	 * @return 无
	 * @throws 无
	 */
	public void removeRole(String roleId) {
		// 调用DAO执行角色更新处理
		roleMapper.removeRole(roleId);
		//删除该角色跟用户之间的关系
		UserRoleDO userRole=new UserRoleDO();
		userRole.setRoleId(roleId);
		userRoleMapper.removeUserRole(userRole);
		//删除角色菜单之间的关系
//		menuMapper.removeMenusByRoleId(roleId);
		
	}

	/**
	 * 取得角色一览
	 * 
	 * @author yangweir
	 * @since Version 1.0
	 * @return List<RoleModel> 角色一览
	 * @throws 无
	 */
	public List<RoleDO> getRoleList() {
		// 角色一览
		List<RoleDO> listRole;

		// 取得角色一览
		listRole = roleMapper.getRoleList();

		// 返回角色一览
		return listRole;
	}

	/**
	 * 查询角色一览
	 * 
	 * @author yangweir
	 * @since Version 1.0
	 * @return List<RoleModel> 角色一览
	 * @throws 无
	 */
	public List<RoleDO> searchRoleList(RoleDO role) {
		// 角色一览
		List<RoleDO> listRole;

		// 取得角色一览
		listRole = roleMapper.searchRoleList(role);

		// 返回角色一览
		return listRole;

	}

	/**
	 * 查询角色数据条数
	 * 
	 * @author yangweir
	 * @since Version 1.0
	 * @param roleModel
	 *            查询用角色对象
	 * @return long 角色数据条数
	 * @throws 无
	 */
	public long searchRoleCount(RoleDO roleModel) {

		// 返回角色数据条数
		return roleMapper.searchRoleCount(roleModel);
	}

	/**
	 * 角色唯一性检查
	 * 
	 * @author yangweir
	 * @since Version 1.0
	 * @param roleModel
	 *            角色信息
	 * @return String 角色唯一性检查结果 "true":通过 "false":不通过
	 * @throws 无
	 */
	public String checkRoleUnique(String roleId) {

		// 处理结果
		String processResult = CommonConsts.CHECK_RESULT_OK;
		// 角色数
		int roleCount = 0;

		// 根据角色登录ID取得角色数
		roleCount = roleMapper.getRoleCountById(roleId);

		// 如果取得的角色数大于0个，返回错误标识
		if (roleCount > 0) {
			return CommonConsts.CHECK_RESULT_NG;
		}

		// 返回处理结果标识
		return processResult;

	}

	
//	@Override
//	public String saveRole(RoleDO roleModel, String menuIds) {
//		roleMapper.addRole(roleModel);
//		roleMapper.modifyRoleMenuRelation(roleModel.getRoleId(),menuIds);
//		return null;
//	}
	
//	@Override
//	public String modifyRole(RoleDO roleModel, String menuIds) {
//		roleMapper.modifyRole(roleModel);
//		roleMapper.modifyRoleMenuRelation(roleModel.getRoleId(),menuIds);
//		return null;
//	}


	@Override
	public List<RoleDO> getParentRoleListByCurrentUser(UserDO user) {
		//超级管理员可以查看自己等级及以下的角色
		if(user.getUserLevel()==WanmaConstants.USER_LEVEL_SUPER){
			return roleMapper.getParentRoleList(user);
		}else if(user.getUserLevel()==WanmaConstants.USER_LEVEL_ADMIN){
			//管理员可以查看自己等级及以下的角色
			return roleMapper.getParentRoleList(user);
		}else if(user.getUserLevel()==WanmaConstants.USER_LEVEL_BUSINESS){
			//纯商户可以查看自己公司人员创建的角色
			return roleMapper.getParentRoleListByCompanyId(user);
		}else{
			//其余人可以只能创建的角色
			return roleMapper.getParentRoleListByCreateUserId(user);
		}
		
	}

	@Override
	public Long getParentRoleListCountByCurrentUser(UserDO user) {
		//超级管理员可以查看自己等级及以下的角色
		if(user.getUserLevel()==WanmaConstants.USER_LEVEL_SUPER){
			return roleMapper.getParentRoleListCount(user);
		}else if(user.getUserLevel()==WanmaConstants.USER_LEVEL_ADMIN){
			//管理员可以查看自己等级的角色
			return roleMapper.getParentRoleListCount(user);
		}else if(user.getUserLevel()==WanmaConstants.USER_LEVEL_BUSINESS){
			//纯商户可以查看自己公司人员创建的角色
			return roleMapper.getParentRoleListCountByCompanyId(user);
		}else{
			//其余人可以只能创建的角色
			return roleMapper.getParentRoleListCountByCreateUserId(user);
		}
	}

	@Override
	public List<RoleDO> getRoleListByCompanyId(Integer companyId) {
		UserDO user=new UserDO();
//		user.setBusiCompanyId(companyId);
		return roleMapper.getParentRoleListByCompanyId(user);
	}

	@Override
	public String updateUserRoleRelation(Long userId, String roleIds) {
//		roleMapper.deleteUserRoleRelation(userId,roleIds);
//		if(StringUtils.isNotBlank(roleIds)){
//			roleMapper.saveUserRoleRelation(userId,roleIds);
//		}
		
		return null;
	}

	

	/* 
	* Title: getBusinessNormalRole   
	* Description: 
	* @return    
	* @see com.bluemobi.product.service.RoleService#getBusinessNormalRole()    
	*/
	@Override
	public RoleDO getBusinessNormalRole() {
//		Role role=WanmaConstants.businessNormalRole;
//		if(role==null){
//			role=new Role();
//			role.setRoleName("个体商家");
//			role=roleMapper.getRole(role);
//		}
//		return role;
		return null;
	}

	@Override
	public int checkCommonUnique(Map<String, String> map) {
		// TODO Auto-generated method stub
		return 0;
	}




	





	



	





	
}
