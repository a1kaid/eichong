package com.wanma.ims.controller.user;

import com.wanma.ims.common.domain.LevelDO;
import com.wanma.ims.common.domain.UserDO;
import com.wanma.ims.common.domain.base.Pager;
import com.wanma.ims.common.dto.BaseResultDTO;
import com.wanma.ims.common.dto.ResultDTO;
import com.wanma.ims.constants.ResultCodeConstants;
import com.wanma.ims.controller.BaseController;
import com.wanma.ims.controller.result.JsonException;
import com.wanma.ims.controller.result.JsonResult;
import com.wanma.ims.controller.vo.UserCountVO;
import com.wanma.ims.controller.vo.UserVO;
import com.wanma.ims.service.FinAccountService;
import com.wanma.ims.service.UserService;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;

import javax.servlet.http.HttpServletResponse;
import java.util.List;
import java.util.Map;


/**
 * 用戶管理-用户管理
 * <p>
 * 总入口（APP用户，渠道用户只有一个controller）
 */
@RequestMapping("/user")
@Controller
public class UserController extends BaseController {
    private static final Logger LOGGER = LoggerFactory.getLogger(UserController.class);

    @Autowired
    private UserService userService;
    @Autowired
    private FinAccountService finAccountService;

    /**
     * 查询用户列表
     */
    @RequestMapping(value = "/getUserList", method = RequestMethod.POST)
    @ResponseBody
    public void getUserList(UserDO searchModel, Pager pager) {
        JsonResult result = new JsonResult();
        UserDO loginUser = getCurrentLoginUser();

        try {
            searchModel.setCpyIds(getCurrentPermission());
            long total = userService.countUser(searchModel);
            if (total <= pager.getOffset()) {
                pager.setPageNo(1L);
            }
            pager.setTotal(total);
            searchModel.setPager(pager);
            List<UserDO> userList = userService.getUserList(searchModel);
            result.setPager(pager);
            result.setDataObject(UserVO.getUserVOList(userList));

            responseJson(result);
        } catch (Exception e) {
            LOGGER.error("UserController-getUserList is error|searchModel={}|loginUser={}", searchModel, loginUser, e);
            responseJson(new JsonException("查询用户列表失败，请刷新页面后重试！"));
        }
    }

    /***
     * 检查用户账号是否唯一
     */
    @RequestMapping(value = "/checkUserAccount", method = RequestMethod.POST)
    @ResponseBody
    public void checkUserAccountIsUnique(Long cpyNum, String userAccount) {
        JsonResult result = new JsonResult();
        UserDO loginUser = getCurrentLoginUser();

        try {
            boolean isUnique = userService.checkUserAccountIsUnique(cpyNum, userAccount);
            result.setDataObject(isUnique);

            responseJson(result);
        } catch (Exception e) {
            LOGGER.error("UserController-checkUserAccountIsUnique is error|cpyNum={}|userAccount={}|loginUser={}", cpyNum, userAccount, loginUser, e);
            responseJson(new JsonException("检查用户账号是否唯一失败！"));
        }
    }

    /**
     * 新增渠道用户
     */
    @RequestMapping(value = "/addUserCompany", method = RequestMethod.POST)
    @ResponseBody
    public void addUserCompany(UserDO user) {
        JsonResult result = new JsonResult();
        UserDO loginUser = getCurrentLoginUser();

        try {
            BaseResultDTO resultDTO = userService.addUserCompany(user, loginUser);
            if (resultDTO.isFailed()) {
                result = new JsonResult(false, resultDTO.getResultCode(), resultDTO.getErrorDetail());
            }

            responseJson(result);
        } catch (Exception e) {
            LOGGER.error("UserController-addUserCompany is error|addUser={}|loginUser={}", user, loginUser, e);
            responseJson(new JsonException("添加渠道用户失败！"));
        }
    }

    /**
     * 导出用户信息
     */
    @RequestMapping(value = "/exportUser", method = RequestMethod.GET)
    @ResponseBody
    public void exportUser(HttpServletResponse response, UserDO searchModel) {
        JsonResult result;
        UserDO loginUser = getCurrentLoginUser();

        try {
            BaseResultDTO resultDTO = userService.exportUser(response, searchModel, loginUser);
            if (resultDTO.isFailed()) {
                result = new JsonResult(false, resultDTO.getResultCode(), resultDTO.getErrorDetail());
                responseJson(result);
            }
        } catch (Exception e) {
            LOGGER.error("UserController-exportUser is error|searchModel={}|loginUser={}", searchModel, loginUser, e);
            responseJson(new JsonException("导出用户信息失败！"));
        }
    }

    /**
     * 修改用户基础信息
     */
    @RequestMapping(value = "/modifyUser", method = RequestMethod.POST)
    @ResponseBody
    public void modifyUser(UserDO user) {
        JsonResult result = new JsonResult();
        UserDO loginUser = getCurrentLoginUser();

        try {
            BaseResultDTO resultDTO = userService.modifyUser(user, loginUser);
            if (resultDTO.isFailed()) {
                result = new JsonResult(false, resultDTO.getResultCode(), resultDTO.getErrorDetail());
            }

            responseJson(result);
        } catch (Exception e) {
            LOGGER.error("UserController-modifyUser is error|modifyUser={}|loginUser={}", user, loginUser, e);
            responseJson(new JsonException("修改渠道用户失败！"));
        }
    }

    /**
     * 修改用户头像
     */
    @RequestMapping(value = "/modifyUserHeadImg", method = RequestMethod.POST)
    @ResponseBody
    public void modifyUserHeadImg(@RequestParam(value = "file", required = false) MultipartFile[] file, Long userId) {
        JsonResult result = new JsonResult();
        try {
            ResultDTO<String> resultDTO = userService.modifyUserHeadImg(file, userId, getCurrentLoginUser());
            if (resultDTO.isFailed()) {
                result = new JsonResult(false, resultDTO.getResultCode(), resultDTO.getErrorDetail());
            } else {
                result.setDataObject(resultDTO.getModule());
            }
            responseJson(result);
        } catch (Exception e) {
            LOGGER.error("UserController-addUserCompany is error|modifyImg={}|loginUser={}", getCurrentLoginUser(), e);
            responseJson(new JsonException("修改用户头像失败！"));
        }
    }

    /**
     * 重置登陆密码
     */
    @RequestMapping(value = "/resetLoginPassword", method = RequestMethod.POST)
    @ResponseBody
    public void resetLoginPassword(Long userId) {
        JsonResult result = new JsonResult();
        UserDO loginUser = getCurrentLoginUser();

        try {
            BaseResultDTO resultDTO = userService.resetLoginPassword(userId, loginUser);
            if (resultDTO.isFailed()) {
                result = new JsonResult(false, resultDTO.getResultCode(), resultDTO.getErrorDetail());
            }

            responseJson(result);
        } catch (Exception e) {
            LOGGER.error("UserController-resetLoginPassword is error|modifyUserId={}|loginUser={}", userId, loginUser, e);
            responseJson(new JsonException("重置登陆密码失败，请刷新页面后再试！"));
        }
    }

    /**
     * 重置支付密码
     */
    @RequestMapping(value = "/resetPayPassword", method = RequestMethod.POST)
    @ResponseBody
    public void resetPayPassword(Long accountId) {
        JsonResult result = new JsonResult();
        UserDO loginUser = getCurrentLoginUser();

        try {
            int line = finAccountService.modifyFinAccountPwd(accountId, loginUser);
            if (line != 1) {
                result = new JsonResult(false, ResultCodeConstants.FAILED, "重置支付密码失败，请刷新页面后再试！");
            }

            responseJson(result);
        } catch (Exception e) {
            LOGGER.error("UserController-resetPayPassword is error|accountId={}|loginUser={}", accountId, loginUser, e);
            responseJson(new JsonException("重置支付密码失败，请刷新页面后再试！"));
        }
    }

    /**
     * 冻结用户
     */
    @RequestMapping(value = "/freezeUser", method = RequestMethod.POST)
    @ResponseBody
    public void freezeUser(String userIds) {
        JsonResult result = new JsonResult();
        UserDO loginUser = getCurrentLoginUser();

        try {
            BaseResultDTO resultDTO = userService.freezeUser(userIds, loginUser);
            if (resultDTO.isFailed()) {
                result = new JsonResult(false, resultDTO.getResultCode(), resultDTO.getErrorDetail());
            }

            responseJson(result);
        } catch (Exception e) {
            LOGGER.error("UserController-frostUser is error|freezeUserIds={}|loginUser={}", userIds, loginUser, e);
            responseJson(new JsonException("冻结用户失败，请刷新页面后再试！"));
        }
    }

    /**
     * 解冻用户
     */
    @RequestMapping(value = "/unfreezeUser", method = RequestMethod.POST)
    @ResponseBody
    public void unfreezeUser(String userIds) {
        JsonResult result = new JsonResult();
        UserDO loginUser = getCurrentLoginUser();

        try {
            BaseResultDTO resultDTO = userService.unfreezeUser(userIds, loginUser);
            if (resultDTO.isFailed()) {
                result = new JsonResult(false, resultDTO.getResultCode(), resultDTO.getErrorDetail());
            }

            responseJson(result);
        } catch (Exception e) {
            LOGGER.error("UserController-unfreezeUser is error|unfreezeUserIds={}|loginUser={}", userIds, loginUser, e);
            responseJson(new JsonException("解冻用户失败，请刷新页面后再试！"));
        }
    }

    /**
     * 用户主页
     */
    @RequestMapping(value = "/userIndex", method = RequestMethod.POST)
    @ResponseBody
    public void userIndex(Long userId) {
        UserDO loginUser = getCurrentLoginUser();

        try {
            UserDO user = userService.getUserIndex(userId, loginUser);
            if (user != null) {
                responseJson(UserVO.valueOf(user));
            } else {
                responseJson(new JsonException("获取用户主页失败，请刷新页面后再试！"));
            }
        } catch (Exception e) {
            LOGGER.error("UserController-userIndex is error|userId={}|loginUser={}", userId, loginUser, e);
            responseJson(new JsonException("获取用户主页失败，请刷新页面后再试！"));
        }
    }

    /**
     * 卡主页用户
     */
    @RequestMapping(value = "/cardIndexUser", method = RequestMethod.POST)
    @ResponseBody
    public void cardIndexUser(Long userId) {
        UserDO loginUser = getCurrentLoginUser();

        try {
            UserDO user = userService.getUserById(userId);
            JsonResult result = new JsonResult();
            if (user != null) {
                result.setDataObject(UserVO.valueOf(user));
                responseJson(result);
            } else {
                responseJson(new JsonException("卡主页用户获取失败，该用户不存在，请刷新页面后再试！"));
            }
        } catch (Exception e) {
            LOGGER.error("UserController-userIndex is error|userId={}|loginUser={}", userId, loginUser, e);
            responseJson(new JsonException("卡主页用户获取失败，请刷新页面后再试！"));
        }
    }

    /**
     * 公司主页用户
     */
    @RequestMapping(value = "/companyIndexUser", method = RequestMethod.POST)
    @ResponseBody
    public void companyIndexUser(Long cpyId) {
        JsonResult result = new JsonResult();
        UserDO loginUser = getCurrentLoginUser();

        try {
            Map<LevelDO, Long> resultMap = userService.getCompanyIndexUser(cpyId, loginUser);
            result.setDataObject(UserCountVO.getUserVOList(resultMap));

            responseJson(result);
        } catch (Exception e) {
            LOGGER.error("UserController-userIndex is error|cpyId={}|loginUser={}", cpyId, loginUser, e);
            responseJson(new JsonException("公司主页用户获取失败，请刷新页面后再试！"));
        }
    }
}
