package com.wanma.ims.service.impl;

import com.wanma.ims.common.convert.Convert2CountAdminEpDO;
import com.wanma.ims.common.domain.*;
import com.wanma.ims.common.dto.BaseResultDTO;
import com.wanma.ims.constants.ResultCodeConstants;
import com.wanma.ims.constants.WanmaConstants;
import com.wanma.ims.mapper.*;
import com.wanma.ims.service.CommonRedisService;
import com.wanma.ims.service.CompanyService;
import com.wanma.ims.service.UserAdminService;
import com.wanma.ims.util.MD5Util;
import com.wanma.ims.util.ObjectUtil;
import org.apache.commons.collections.CollectionUtils;
import org.apache.commons.lang.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Map;

@Service
public class UserAdminServiceImpl implements UserAdminService {

    private final Logger LOGGER = LoggerFactory.getLogger(this.getClass());

    @Autowired
    private UserMapper userMapper;
    @Autowired
    private UserAdminMapper userAdminMapper;
    @Autowired
    private UserRoleMapper userRoleMapper;
    @Autowired
    private ElectricPileMapper electricPileMapper;
    @Autowired
    private CountAdminEpRelaMapper countAdminEpRelaMapper;
    @Autowired
    private CommonRedisService commonRedisService;
    @Autowired
    private CompanyService companyService;

    @Override
    public Long countUserAdminList(UserAdminDO userAdminDO) {
        return userAdminMapper.countUserAdminList(userAdminDO);
    }

    @Override
    public List<UserAdminDO> getUserAdminList(UserAdminDO userAdminDO) {
        List<UserAdminDO> list = userAdminMapper.selectUserAdminList(userAdminDO);
        Map<Long, CompanyDO> companyMap = companyService.getCompanyMap(null);
        for (UserAdminDO userAdmin : list) {
            if (null != companyMap.get(userAdmin.getCpyId())) {
                userAdmin.setCpyName(companyMap.get(userAdmin.getCpyId()).getCpyName());
            }
        }
        return list;
    }

    @Override
    public BaseResultDTO addUserAdmin(UserAdminDO userAdminDO, UserDO loginUser) throws Exception {
        BaseResultDTO result = new BaseResultDTO();
        UserDO userDO = new UserDO();
        userDO.setUserAccount(userAdminDO.getUserAccount());
        userDO.setUserPassword(MD5Util.Md5(userAdminDO.getUserPassword()));
        userDO.setUserLevel(userAdminDO.getUserLevel());
        userDO.setUserStatus(WanmaConstants.USER_STATUS_NORMAL);
        userDO.setCreator(loginUser.getUserAccount());
        String errorCode = validate(userAdminDO);
        if (StringUtils.isNotEmpty(errorCode)) {
            result.setSuccess(false);
            result.setErrorDetail(errorCode);
            return result;
        }
        int count = userMapper.insertUser(userDO);
        if (count <= 0) {
            result.setSuccess(false);
            result.setErrorDetail(ResultCodeConstants.ERROR_MSG_ADD_USER);
            return result;
        }
        userAdminDO.setUserId(userDO.getUserId());
        if (userAdminMapper.insertUserAdmin(userAdminDO) <= 0) {
            result.setSuccess(false);
            result.setErrorDetail(ResultCodeConstants.ERROR_MSG_ADD_USER_ADMIN);
            return result;
        }
        // 管理员角色权限 TODO:管理员只能有一个角色了，后期应该有入口可以多个角色的
        UserRoleDO userRoleDO = new UserRoleDO();
        userRoleDO.setRoleId(userAdminDO.getRoleId());
        userRoleDO.setUserId(userDO.getUserId());
        userRoleDO.setCreator(loginUser.getUserAccount());
        userRoleDO.setModifier(loginUser.getUserAccount());
        if (userRoleMapper.insertUserRole(userRoleDO) <= 0) {
            result.setSuccess(false);
            result.setErrorDetail(ResultCodeConstants.ERROR_MSG_ADD_USER_ROLE);
            return result;
        }
        /**
         * 系统管理员无需设置充电桩数据权限，默认所有
         * 业务管理员设置桩权限
         *        系统管理员-业务管理员 ,可选继承公司or不需要设置数据权限
         *        业务管理员-业务管理员,默认继承父级充电桩数据权限
         */
        if (userAdminDO.getUserLevel() == WanmaConstants.USER_LEVEL_WORK) {
            boolean flag = false;
            List<CountAdminEpRelaDO> epRelaList = null;
            if (loginUser.getUserLevel() == WanmaConstants.USER_LEVEL_WORK && userAdminDO.getIsCpyEp() == WanmaConstants.IS_COMPANY_EP_ON) {
                result.setSuccess(false);
                result.setErrorDetail(ResultCodeConstants.ERROR_MSG_NO_PERMISSION);
                return result;
            }
            if (loginUser.getUserLevel() == WanmaConstants.USER_LEVEL_ADMIN || loginUser.getUserLevel() == WanmaConstants.USER_LEVEL_SUPER) {
                flag = true;
                if (userAdminDO.getIsCpyEp().equals(WanmaConstants.IS_COMPANY_EP_ON)) {
                    // 继承公司数据权限
                    ElectricPileDO domain = new ElectricPileDO();
                    domain.setCompanyId(userAdminDO.getCpyId());
                    List<ElectricPileDO> epList = electricPileMapper.selectElectricPileList(domain);
                    epRelaList = Convert2CountAdminEpDO.convertEpList2AdminEpList(epList, userAdminDO.getUserId(), loginUser);
                }
            }
            // 继承父级数据权限
            if (!flag) {
                epRelaList = commonRedisService.getAdminEpRelaByLoginId(loginUser);
            }
            if (CollectionUtils.isNotEmpty(epRelaList)) {
                if (countAdminEpRelaMapper.batchInsertCountAdminEpRela(epRelaList) <= 0) {
                    result.setSuccess(false);
                    result.setErrorDetail(ResultCodeConstants.ERROR_MSG_ADD_ADMIN_COMPANY_EP);
                    return result;
                }

            }
            result.setSuccess(true);
        }
        return result;
    }

    @Override
    public UserAdminDO getUserAdminById(Long userId) {
        UserAdminDO userAdmin = userAdminMapper.selectUserAdminByUserId(userId);
        Map<Long, CompanyDO> companyMap = companyService.getCompanyMap(null);
        if (null != companyMap.get(userAdmin.getCpyId())) {
            userAdmin.setCpyName(companyMap.get(userAdmin.getCpyId()).getCpyName());
        }
        return userAdmin;
    }

    @Override
    public List<UserAdminDO> getUserAdminByCpyId(Long cpyId) {
        return userAdminMapper.selectUserAdminByCpyId(cpyId);
    }

    @Override
    public boolean modifyUserRole(UserRoleDO userRole) throws Exception {
        return userRoleMapper.updateUserRole(userRole) > 0 ? true : false;
    }

    @Override
    public UserAdminDO viewUserAdmin(Long userId) {
        UserAdminDO userAdmin = new UserAdminDO();
        userAdmin.setUserId(userId);
        List<UserAdminDO> list = getUserAdminList(userAdmin);
        if (CollectionUtils.isEmpty(list)) {
            return userAdmin;
        }
        return list.get(0);
    }

    private String validate(UserAdminDO userAdminDO) {
        StringBuilder sb = new StringBuilder();
        if (StringUtils.isEmpty(userAdminDO.getUserLevel() + "")) {
            sb.append("类型不能为空<br>");
        }
        if (StringUtils.isNotEmpty(userAdminDO.getUserLevel() + "")
                && userAdminDO.getUserLevel() == WanmaConstants.USER_LEVEL_WORK
                && ObjectUtil.isEmpty(userAdminDO.getCpyId())) {
            sb.append("渠道不能为空<br>");
        }
        if (StringUtils.isEmpty(userAdminDO.getUserAccount())) {
            sb.append("账号不能为空<br>");
        }
        if (StringUtils.isEmpty(userAdminDO.getRoleId())) {
            sb.append("角色不能为空<br>");
        }
        if (StringUtils.isEmpty(userAdminDO.getUserPassword())) {
            sb.append("密码不能为空<br>");
        }
        if (StringUtils.isNotEmpty(userAdminDO.getUserLevel() + "")
                && userAdminDO.getUserLevel() == WanmaConstants.USER_LEVEL_ADMIN
                && "1".equals(userAdminDO.getIsCpyEp())) {
            sb.append("渠道可用桩赋予该管理员不能勾选");
        }

        // 管理员是否重复
        UserDO user = userMapper.selectUserByUserId(userAdminDO.getUserId());
        if (null == user) {
            List<UserDO> userList = userMapper.selectUserByUserAccount(userAdminDO.getUserAccount());
            if (CollectionUtils.isNotEmpty(userList)) {
                sb.append("管理员账号重复");
            }
        } else {
            if (!user.getUserAccount().equals(userAdminDO.getUserAccount())) {
                List<UserDO> userList = userMapper.selectUserByUserAccount(userAdminDO.getUserAccount());
                if (CollectionUtils.isNotEmpty(userList)) {
                    sb.append("管理员账号重复");
                }
            }
        }
        return sb.toString();
    }

    @Override
    public List<UserAdminDO> getUserAccountByCpyId(Long cpyId) {
        return userAdminMapper.selectUserAccountByCpyId(cpyId);
    }

}
