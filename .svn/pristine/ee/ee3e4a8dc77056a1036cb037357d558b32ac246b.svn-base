package com.wanma.ims.redis;

import org.springframework.data.redis.core.RedisTemplate;

/**
 * 封装redis 缓存服务器服务接口
 * 
 */
public class RedisUtil {
	@SuppressWarnings("rawtypes")
	private RedisTemplate redisTemplate;

	/**
	 * 设值
	 */
	@SuppressWarnings({ "rawtypes", "unchecked" })
	public Long listSet(Class clazz, Object value) {
		return redisTemplate.opsForList().leftPush(keyListPrefix(clazz),value);
	}
	
	/**
	 * 设值
	 */
	@SuppressWarnings({ "rawtypes", "unchecked" })
	public Long listSet(Class clazz, long index, Object value) {
		return redisTemplate.opsForList().leftPush(keyListPrefix(clazz,index), value);
	}
	
	/**
	 * 置值
	 * 
	 * @param key
	 * @param index
	 * @param value
	 */
	@SuppressWarnings({ "rawtypes", "unchecked" })
	public void listIndexSet(Class clazz, long index, Object value) {
		redisTemplate.opsForList().set(keyListPrefix(clazz), index, value);
	}

	/**
	 * 压栈
	 */
	@SuppressWarnings({ "rawtypes", "unchecked" })
	public Long listStackPush(Class clazz, Object value) {
		return redisTemplate.opsForList().leftPush(keyListPrefix(clazz), value);
	}

	/**
	 * 出栈
	 */
	@SuppressWarnings({ "rawtypes", "unchecked" })
	public Object listStackPop(Class clazz) {
		return redisTemplate.opsForList().leftPop(keyListPrefix(clazz));
	}

	/**
	 * 入队
	 */
	@SuppressWarnings({ "rawtypes", "unchecked" })
	public Long listQueuePush(Class clazz, Object value) {
		return redisTemplate.opsForList()
				.rightPush(keyListPrefix(clazz), value);
	}

	/**
	 * 出队
	 */
	@SuppressWarnings({ "rawtypes", "unchecked" })
	public Object ListQueuePop(Class clazz) {
		return redisTemplate.opsForList().leftPop(keyListPrefix(clazz));
	}

	/**
	 * 栈/队列长
	 * 
	 * @param key
	 * @return
	 */
	@SuppressWarnings({ "rawtypes", "unchecked" })
	public Long listLength(Class clazz) {
		return redisTemplate.opsForList().size(keyListPrefix(clazz));
	}

	@SuppressWarnings({ "rawtypes" })
	public Object listGetAll(Class clazz) {
		return listGetByRange(keyListPrefix(clazz), 0, -1);
	}

	@SuppressWarnings({ "rawtypes" })
	public Object listGetAll(Class clazz,long index) {
		return listGetByRange(keyListPrefix(clazz,index), 0, -1);
	}
	/**
	 * 范围检索
	 */
	@SuppressWarnings("unchecked")
	public Object listGetByRange(String key, int start, int end) {
		return redisTemplate.opsForList().range(key, start,end);
	}

	/**
	 * 移除
	 * 
	 * @param key
	 * @param i
	 * @param value
	 */
	@SuppressWarnings({ "rawtypes", "unchecked" })
	public void listRemove(Class clazz, String value) {
		redisTemplate.opsForList().remove(keyListPrefix(clazz), 10, value);
	}

	/**
	 * 检索
	 * 
	 * @param key
	 * @param index
	 * @return
	 */
	@SuppressWarnings({ "rawtypes", "unchecked" })
	public Object listGetByIndex(Class clazz, long index) {
		return redisTemplate.opsForList().index(keyListPrefix(clazz), index);
	}

	/**
	 * 移除
	 * 
	 * @param key
	 * @param i
	 * @param value
	 */
	@SuppressWarnings({ "rawtypes", "unchecked" })
	public void listRemove(Class clazz, long i, String value) {
		redisTemplate.opsForList().remove(keyListPrefix(clazz), i, value);
	}

	/**
	 * 裁剪
	 * 
	 * @param key
	 * @param start
	 * @param end
	 */
	@SuppressWarnings({ "rawtypes", "unchecked" })
	public void listTrim(Class clazz, String key, long start, int end) {
		redisTemplate.opsForList().trim(keyListPrefix(clazz), start, end);
	}

//	/**
//	 * String Set
//	 * 
//	 * @param key
//	 * @param value
//	 */
//	@SuppressWarnings({ "unchecked" })
//	public void set(String key, Object value) {
//		redisTemplate.opsForValue().set(keyPrefix(value) + key, value);
//	}
//
//	/**
//	 * String Get
//	 * 
//	 * @param key
//	 * @return
//	 */
//	@SuppressWarnings({ "rawtypes" })
//	public Object get(String key, Class clazz) {
//		return redisTemplate.opsForValue().get(keyPrefix(clazz) + key);
//	}

	@SuppressWarnings({ "rawtypes", "unchecked" })
	public void remove(String key, Class clazz) {
		redisTemplate.delete(keyPrefix(clazz) + key);
	}

	/**
	 * String Set
	 * 
	 * @param key
	 * @param value
	 */
	@SuppressWarnings({ "unchecked" })
	public void strSet(String key, Object value) {
		redisTemplate.opsForValue().set(keyPrefix(key), value);
	}

	/**
	 * String Get
	 * 
	 * @param key
	 * @return
	 */
	public String strGet(String key) {
		return (String) redisTemplate.opsForValue().get(keyPrefix(key));
	}

	@SuppressWarnings("unchecked")
	public void strRemove(String key) {
		redisTemplate.delete(keyPrefix(key));
	}

	public String keyPrefix(String key) {
		return "red:bean:" + key;
	}

	public String keyPrefix(Object obj) {
		return keyPrefix(obj.getClass());
	}

	@SuppressWarnings("rawtypes")
	public String keyPrefix(Class clazz) {
		return "red:bean:" + clazz.getSimpleName() + ":";
	}

	public String keyListPrefix(String key) {
		return "red:list:" + key;
	}

	public String keyListPrefix(Object obj) {
		return keyListPrefix(obj.getClass());
	}

	@SuppressWarnings("rawtypes")
	public String keyListPrefix(Class clazz) {
		return "red:list:" + clazz.getSimpleName() + ":";
	}

	@SuppressWarnings("rawtypes")
	public String keyListPrefix(Class clazz,long index) {
		return "red:list:" + clazz.getSimpleName() + ":"+index;
	}
	
	@SuppressWarnings("rawtypes")
	public RedisTemplate getRedisTemplate() {
		return redisTemplate;
	}

	@SuppressWarnings("rawtypes")
	public void setRedisTemplate(RedisTemplate redisTemplate) {
		this.redisTemplate = redisTemplate;
	}
    
	
}