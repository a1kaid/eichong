package com.wanma.ims.controller.config;

import java.util.ArrayList;
import java.util.List;

import javax.servlet.http.HttpServletRequest;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.wanma.ims.common.domain.UserBlackWhiteDO;
import com.wanma.ims.common.domain.base.Pager;
import com.wanma.ims.common.domain.bo.UserBlackWhiteBO;
import com.wanma.ims.constants.ResultCodeConstants;
import com.wanma.ims.controller.BaseController;
import com.wanma.ims.controller.result.JsonResult;
import com.wanma.ims.service.UserBlackWhiteService;

/**
 * 黑白名单
 */
@RequestMapping("/config")
@Controller
public class UserBlackWhiteController extends BaseController{
	
	private final Logger log = LoggerFactory.getLogger(this.getClass());

	@Autowired
	private UserBlackWhiteService userBlackWhiteService;
	
	/**
	* <p>Description: 获取黑白名单列表</p>
	* @param
	* @author bingo
	* @date 2017-7-5
	 */
	@RequestMapping(value = "/getUserBlackWhite")
	@ResponseBody
	public void getUserBlackWhiteList(@ModelAttribute("pager") Pager pager,
			@ModelAttribute UserBlackWhiteDO userBlackWhite, Model model,HttpServletRequest request){
		JsonResult batchResult = new JsonResult();
		Long total = 0l;
		try {
			total = userBlackWhiteService.getUserBlackWhiteCount(userBlackWhite);
		} catch (Exception e) {
			responseJson(e);
		}
		if (total <= pager.getOffset()) {
			pager.setPageNo(1L);
		}
		pager.setTotal(total);
		userBlackWhite.setPager(pager);
		
		List<UserBlackWhiteDO> userBlackWhiteList = userBlackWhiteService.getUserBlackWhiteByParam(userBlackWhite);
		if (userBlackWhiteList == null) {
			userBlackWhiteList = new ArrayList<UserBlackWhiteDO>();
		}
		batchResult.setDataObject(userBlackWhiteList);
		batchResult.setPager(pager);
		
		responseJson(batchResult);
	}
	
	/**
	* <p>Description: 新增黑白名单</p>
	* @param
	* @author bingo
	* @date 2017-7-5
	 */
	@RequestMapping(value = "/addUserBlackWhite")
	@ResponseBody
	public void addUserBlackWhite(@ModelAttribute UserBlackWhiteBO userBlackWhiteBO, Model model, HttpServletRequest request) {
		Integer result = 0;
		try {
			result = userBlackWhiteService.addUserBlackWhite(userBlackWhiteBO);
		} catch (Exception e) {
			responseJson(e);
		}
		
		if (result == 0) {
			responseJson(new JsonResult(false, ResultCodeConstants.FAILED, ResultCodeConstants.ERROR_MSG_ERROR_ADD));
		}else if (result == 1) {
			responseJson(new JsonResult());
		}else if (result == 2) {
			responseJson(new JsonResult(false, ResultCodeConstants.FAILED, "黑白名单信息不能为空！"));
		}else if (result == 3) {
			responseJson(new JsonResult(false, ResultCodeConstants.FAILED, "用户账号不能为空！"));
		}else if (result == 4) {
			responseJson(new JsonResult(false, ResultCodeConstants.FAILED, "桩编号不能为空！"));
		}else if (result == 5) {
			responseJson(new JsonResult(false, ResultCodeConstants.FAILED, "用户账号不存在！"));
		}else if (result == 6) {
			responseJson(new JsonResult(false, ResultCodeConstants.FAILED, "渠道对应的桩编码不在公司权限表中！"));
		}else if (result == 7) {
			responseJson(new JsonResult(false, ResultCodeConstants.FAILED, "渠道对应的桩编码已存在！"));
		}
	}
	
	/**
	* <p>Description: 删除黑白名单</p>
	* @param
	* @author bingo
	* @date 2017-7-5
	 */
	@RequestMapping(value = "/removeUserBlackWhite")
	@ResponseBody
	public void removeUserBlackWhite(@ModelAttribute UserBlackWhiteDO userBlackWhite, Model model, HttpServletRequest request) {
		int result = 0;
		try {
			result = userBlackWhiteService.removeUserBlackWhite(userBlackWhite);
		} catch (Exception e) {
			log.error(this.getClass() + ".removeUserBlackWhite() error : ", e);
		}
		
		if (result == 0) {
			responseJson(new JsonResult(false, ResultCodeConstants.FAILED, ResultCodeConstants.ERROR_MSG_ERROR_REMOVE));
		}else {
			responseJson(new JsonResult());
		}
	}
	
	
	/**
	* <p>Description: 获取公司首页中黑白名单数据</p>
	* @param
	* @author bingo
	* @date 2017-7-10
	 */
	@RequestMapping(value = "/getUserBlackWhite4Cpy")
	@ResponseBody
	public void getUserBlackWhite4Cpy(@ModelAttribute UserBlackWhiteDO userBlackWhiteDO, Model model,HttpServletRequest request) {
		JsonResult batchResult = new JsonResult();
		
		if (userBlackWhiteDO == null || userBlackWhiteDO.getCpyId() == null) {
			responseJson(new JsonResult(false, ResultCodeConstants.FAILED, "公司账号不能为空！"));
			return;
		}
		
		try {
			List<UserBlackWhiteDO> userBlackWhiteDOList = userBlackWhiteService.getUserBlackWhite4Cpy(userBlackWhiteDO);
			if (userBlackWhiteDOList == null) {
				userBlackWhiteDOList = new ArrayList<UserBlackWhiteDO>();
			}
			batchResult.setDataObject(userBlackWhiteDOList);
		} catch (Exception e) {
			log.error(this.getClass() + ".getUserBlackWhite4Cpy() error : ", e);
		}
		
		responseJson(batchResult);
	}
}
