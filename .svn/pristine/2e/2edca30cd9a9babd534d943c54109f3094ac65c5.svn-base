package com.wanma.ims.service.impl;

import java.text.ParseException;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletResponse;

import org.apache.commons.collections.CollectionUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.google.common.collect.Lists;
import com.wanma.ims.common.domain.ActivityDO;
import com.wanma.ims.common.domain.FavCouponDO;
import com.wanma.ims.common.domain.UserDO;
import com.wanma.ims.common.dto.BaseResultDTO;
import com.wanma.ims.constants.DownFileConstants;
import com.wanma.ims.constants.ResultCodeConstants;
import com.wanma.ims.mapper.FavCouponMapper;
import com.wanma.ims.service.FavCouponService;
import com.wanma.ims.util.ExcelExporterUtil;
@Service("userCouponService")
public class FavCouponServiceImpl implements FavCouponService{
	private static final Logger LOGGER = LoggerFactory.getLogger(UserCardServiceImpl.class);
	@Autowired
	private FavCouponMapper userCouponMapper;
	@Override
	public int getUserAvailableCoupon(FavCouponDO coupon) {
		return userCouponMapper.getUserAvailableCoupon(coupon);
	}
	
	public String getUserDiscountAmount(FavCouponDO coupon) {
		return userCouponMapper.getUserDiscountAmount(coupon);
	}

	@Override
	public void removeCouponByCouponVarietyId(Integer pkCouponVariety) {
		userCouponMapper.removeCouponByCouponVarietyId(pkCouponVariety);
	}

	@Override
	public long getCouponCount(FavCouponDO coupon) {
		return userCouponMapper.getCouponCount(coupon);
	}

	@Override
	public List<FavCouponDO> getCouponList(FavCouponDO coupon) {
		return userCouponMapper.getCouponList(coupon);
	}

	@Override
	public int getCouponStatus(String id) {
		return userCouponMapper.getCouponStatus(id);
	}

	@Override
	public void deleteCoupon(String id) {
		userCouponMapper.deleteCoupon(id);
	}

	@Override
	public BaseResultDTO exportCoupon(HttpServletResponse response,
			FavCouponDO searchModel, UserDO loginUser) {
			 BaseResultDTO result = new BaseResultDTO();
	        List<FavCouponDO> couponList = null;
			try {
				searchModel.setCurrentDate(new Date());
				couponList = getExportCouponList(searchModel);
			} catch (ParseException e) {
				e.printStackTrace();
			}
	        if (CollectionUtils.isEmpty(couponList)) {
	            LOGGER.warn("FavCouponServiceImpl-exportCoupon exportCouponList is empty|searchModel={}|loginUser={}", searchModel, loginUser);
	            return new BaseResultDTO(false, ResultCodeConstants.FAILED, "您导出的数据不存在，请修改正确的查询条件后再导出！");
	        }
	        List<String> attrList = Lists.newArrayList("covaActivityname", "chCpLimitation", "chCpstates", "cpCreatedate", "cpUpdatedate", "cpBegindate","cpEnddate","cpCouponcode","userPhone","actActivityname");
	        List<String> header = Lists.newArrayList("现金券品种", "电桩限制", "状态", "获取时间", "使用时间", "生效时间","到期时间","优惠码","用户手机号","活动名称");
	        ExcelExporterUtil.exportExcel(response, attrList, header, couponList, FavCouponDO.class, DownFileConstants.FILE_COUPON_EXPORT, DownFileConstants.FILE_COUPON_EXPORT_SHEET);
	        return result;
	}
	 private List<FavCouponDO> getExportCouponList(FavCouponDO searchModel) throws ParseException  {
	        List<FavCouponDO> couponList = userCouponMapper.getExportCouponList(searchModel);
	        Map<Integer, String> couponLimitationMap = new HashMap<>();
	        couponLimitationMap.put(1, "仅限交流电桩");
	        couponLimitationMap.put(2, "仅限直流电桩");
	        couponLimitationMap.put(3, "不限充电桩");
	        
	        Map<Integer, String> couponStatesMap = new HashMap<>();
	        couponStatesMap.put(1, "未兑换未过期");
	        couponStatesMap.put(2, "未兑换已过期");
	        couponStatesMap.put(3, "已兑换已使用");
	        couponStatesMap.put(4, "已兑换未使用未过期");
	        couponStatesMap.put(5, "已兑换未使用已过期");

	        for (FavCouponDO coupon : couponList) {
	        	coupon.setChCpLimitation(couponLimitationMap.get((int)coupon.getCpLimitation()));
	        	coupon.setChCpstates(couponStatesMap.get(coupon.getCpstates()));
	        }

	        return couponList;
	    }

	@Override
	public long getUserCouponCount(FavCouponDO coupon) {
		return userCouponMapper.getUserCouponCount(coupon);
	}

	@Override
	public List<FavCouponDO> getUserCouponList(FavCouponDO coupon) {
		return userCouponMapper.getUserCouponList(coupon);
	}

	@Override
	public void changeEndDate(ActivityDO activity) {
		 userCouponMapper.changeEndDate(activity);
	}

}
