package com.wanma.ims.service.impl;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.collections.CollectionUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.wanma.ims.common.domain.ElectricPileDO;
import com.wanma.ims.common.domain.PowerStationDO;
import com.wanma.ims.common.domain.RateInfoDO;
import com.wanma.ims.common.domain.UserDO;
import com.wanma.ims.common.dto.BaseResultDTO;
import com.wanma.ims.constants.ResultCodeConstants;
import com.wanma.ims.constants.WanmaConstants;
import com.wanma.ims.core.GlobalSystem;
import com.wanma.ims.mapper.CompanyChargeRelaMapper;
import com.wanma.ims.mapper.ElectricPileMapper;
import com.wanma.ims.mapper.InitialMapper;
import com.wanma.ims.mapper.PowerStationMapper;
import com.wanma.ims.mapper.RateInfoMapper;
import com.wanma.ims.service.ElectricPileService;
import com.wanma.ims.service.PowerStationService;
import com.wanma.ims.util.ApiUtil;
import com.wanma.ims.util.HttpsUtil;

@Service
public class PowerStationServiceImpl implements PowerStationService {

    private final Logger LOGGER = LoggerFactory.getLogger(this.getClass());
    @Autowired
    private PowerStationMapper powerStationMapper;
    @Autowired
    private ElectricPileService electricPileService;
    @Autowired
    private ElectricPileMapper electricPileMapper;
    @Autowired
    private RateInfoMapper rateInfoMapper;
    @Autowired
    private InitialMapper initialMapper;
    @Autowired
    private CompanyChargeRelaMapper companyChargeMapper;

    @Override
    public Long countPowerStationList(PowerStationDO powerStationDO) {
        return powerStationMapper.countPowerStationList(powerStationDO);
    }

    @Override
    public List<PowerStationDO> getPowerStationList(PowerStationDO powerStationDO) {
        List<PowerStationDO> powerStationList = powerStationMapper.selectPowerStationList(powerStationDO);

        Map<Long,PowerStationDO> powerStationMap = new HashMap<Long,PowerStationDO>();
        for (PowerStationDO powerStationDO2 : powerStationList) {
        	powerStationMap.put(powerStationDO2.getPowerstationId(),powerStationDO2);
		}

        if(CollectionUtils.isNotEmpty(powerStationMap.keySet())){
        	 List<PowerStationDO> electricPileCount = electricPileMapper.countByPowerStationIds(new ArrayList<>(powerStationMap.keySet()));

             for (PowerStationDO count : electricPileCount) {
                 PowerStationDO powerStation = powerStationMap.get(count.getPowerstationId());
                 if (powerStation != null) {
                     powerStation.setElectricPileNum(count.getElectricPileNum());
                 }
             }
        }
       

        return powerStationList;
    }

    @Override
    public PowerStationDO getPowerStationById(Long powerStationId) {
        PowerStationDO powerStationDO = powerStationMapper.selectPowerStationById(powerStationId);
        //省市区
        powerStationDO.setProvinceName(initialMapper.selectProvinceById(powerStationDO.getProvinceCode()));
        powerStationDO.setCityName(initialMapper.selectCityById(powerStationDO.getCityCode()));
        powerStationDO.setAreaName(initialMapper.selectAreaById(powerStationDO.getAreaCode()));
        return powerStationDO;
    }

    @Override
    public BaseResultDTO addPowerStation(PowerStationDO powerStationDO) {
    	BaseResultDTO result = new BaseResultDTO();
    	if(null != powerStationDO.getRateInfoId()){
    		RateInfoDO doamin = new RateInfoDO();
    		doamin.setPk_RateInformation(powerStationDO.getRateInfoId());
    		RateInfoDO info = rateInfoMapper.getRateInfoById(doamin);
    		if(null == info){
    			result.setSuccess(false);
    			result.setErrorDetail("费率不存在，请重新输入");
    			return result;
    		}
    	}
        if(powerStationMapper.insertPowerStation(powerStationDO) <= 0){
        	result.setSuccess(false);
			result.setErrorDetail("新增充电点失败");
			return result;
        }
        result.setSuccess(true);
        return result;
    }

    @Override
    public BaseResultDTO modifyPowerStation(PowerStationDO powerStationDO, List<ElectricPileDO> infoList, UserDO loginUser) {
        BaseResultDTO result = new BaseResultDTO();
        try {
        	if(null != powerStationDO.getRateInfoId() && powerStationDO.getRateInfoId() !=0){
        		RateInfoDO doamin = new RateInfoDO();
        		doamin.setPk_RateInformation(powerStationDO.getRateInfoId());
        		RateInfoDO info = rateInfoMapper.getRateInfoById(doamin);
        		if(null == info){
        			result.setSuccess(false);
        			result.setErrorDetail("费率不存在，请重新输入");
        			return result;
        		}
        	}
            if (powerStationMapper.updatePowerStation(powerStationDO) < 0) {
            	result.setSuccess(false);
    			result.setErrorDetail("修改充电点失败");
    			return result;
            }
            if(CollectionUtils.isNotEmpty(infoList)){
       		 loginUser.setModifier(powerStationDO.getModifier());
                BaseResultDTO dto = electricPileService.bandElectricPile(infoList, WanmaConstants.POWER_STATION_BIND_ELECTRIC_PILE, powerStationDO.getPowerstationId(), loginUser);
                if (!dto.isSuccess()) {
                    result.setSuccess(false);
                    result.setErrorDetail(ResultCodeConstants.ERROR_MSG_MODIFY_POWERSTATION);
                    return result;
                }
         	}
            String htmlUrl = GlobalSystem.getConfig("htmlRoot");
			String powerStationId = powerStationDO.getPowerstationId().toString();
			LOGGER.error(htmlUrl + "/cdzts/powerStationPush.do?powerStationId=" + powerStationId + "&t="+ ApiUtil.getToken());
			HttpsUtil.getResponseParam(htmlUrl + "/cdzts/powerStationPush.do?powerStationId=" + powerStationId + "&t="
							+ ApiUtil.getToken(), "status");
        } catch (Exception e) {
            result.setSuccess(false);
            result.setErrorDetail("修改充电桩信息失败");
            LOGGER.error("PowerStationServiceImpl called modifyPowerStation failed", e);
        }
        return result;
    }

    @Override
    public boolean removePowerStation(Long powerStationId) {
        if (powerStationMapper.deletePowerStationById(powerStationId) > 0) {
            Map<String, Long> map = new HashMap<String, Long>();
            map.put("powerStationId", powerStationId);
            if (electricPileMapper.updateElectricByForeignKey(map) >= 0) {
            	// 删除充电点充电范围
            	List<Long> psIds = new ArrayList<Long>();
            	psIds.add(powerStationId);
            	companyChargeMapper.deleteByPsId(psIds);
                return true;
            }
        }
        return false;
    }

}
