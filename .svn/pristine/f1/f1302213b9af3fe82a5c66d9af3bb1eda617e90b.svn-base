package com.wanma.ims.controller.sys;

import java.util.Arrays;
import java.util.List;

import javax.servlet.http.HttpServletRequest;

import org.apache.commons.collections.CollectionUtils;
import org.apache.commons.lang.StringUtils;
import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.wanma.ims.common.SessionMgr;
import com.wanma.ims.model.MenuDO;
import com.wanma.ims.model.base.Pager;
import com.wanma.ims.result.BaseException;
import com.wanma.ims.result.BaseResult;
import com.wanma.ims.result.BatchResult;
import com.wanma.ims.service.MenuService;
import com.wanma.ims.service.RoleService;
import com.wanma.ims.util.PKUtil;

/**
 * 系统管理-菜单管理
 */
@Controller
@RequestMapping("/admin/menu")
public class MenuController {

	private static Logger log = Logger.getLogger(MenuController.class);
	@Autowired
	private MenuService menuService;
	@Autowired
	private RoleService roleService;

	/**
	 * to菜单页面
	 */
	public String toMenuView() {
		return "admin/menu/menu_list";
	}

	/**
	 * 菜单列表
	 */
	@RequestMapping(value = "/getMenuListPage")
	public String getMenuListPage(MenuDO menuDO, Pager pager, HttpServletRequest request) {
		BatchResult result = new BatchResult();
		try {
			String parentMenuId = request.getParameter("org.id");
			if (StringUtils.isNotBlank(parentMenuId)) {
				menuDO.setParentMenuId(parentMenuId);
			}
			Long total = menuService.countMenuList(menuDO);
			if (total <= pager.getOffset()) {
				pager.setPageNo(1L);
			}
			pager.setTotal(total);
			menuDO.setPager(pager);
			List<MenuDO> menuList = menuService.getMenuListPage(menuDO);
			result.setDataObject(menuList);
		} catch (Exception e) {
			log.error(this.getClass() + ".getMenuListPage() error:" + e.getLocalizedMessage());
			return new BaseException().toString();
		}
		return result.toString();
	}

	
	/**
	 * 菜单-树型菜单
	 */
	public String getMeunTreeLookUp(Model model,HttpServletRequest request){
		BatchResult result = new BatchResult();
		try {
			List<MenuDO> menuList = SessionMgr.getUserMenus(request);
			String strHtml = menuService.getMenuTree(menuList, false);
//			model.addAttribute("treeView", strHtml);
			result.setDataObject(strHtml);
		} catch (Exception e) {
			log.error(this.getClass() + ".getMeunTreeLookUp() error:" + e.getLocalizedMessage());
			return new BaseException().toString();
		}
		return result.toString();
	}
	
	
	/**
	 * 菜单-添加View
	 */
	@RequestMapping("/addMenuView")
	public String addMenuView(Model model, HttpServletRequest request) {
		MenuDO menu = new MenuDO();
		menu.setMenuId(PKUtil.getPkMenuId());
		model.addAttribute("menu", menu);
		return "admin/menu/add_menu";
	}

	
	/**
	 * 菜单-添加
	 */
	@RequestMapping("/addMenu")
	@ResponseBody
	public String addMenu(MenuDO menuDO, BindingResult bindResult, HttpServletRequest request, Model model) {
		BaseResult result = new BaseResult();
		try {
			if (bindResult.hasErrors()) {
				return new BaseResult(false,"2003","绑定出错").toString();
			}
			String parentMenuId = request.getParameter("org.id");
			menuDO.setParentMenuId(parentMenuId);
			menuDO.setCreateUser(SessionMgr.getUserId(request).toString());
			if(!menuService.addMenu(menuDO)){
				return new BaseResult(false,"2001","添加菜单失败").toString();
			}
			// 刷新会话中角色和菜单的缓存
			roleService.initRolesAndMenus(request);
		} catch (Exception e) {
			log.error(this.getClass() + ".saveMenu() error:" + e.getLocalizedMessage());
			return new BaseException().toString();
		}
		return result.toString();
	}

	/**
	 * 菜单-编辑View
	 */
	@RequestMapping(value = "/modifyMenuView")
	public String modifyMenuView(@RequestParam("menuId") String menuId, Model model) {
		MenuDO menuDO = menuService.getMenuById(menuId);
		if (StringUtils.isBlank(menuDO.getParentMenuId())) {
			menuDO.setParentMenuId("");
			menuDO.setParentMenuName("根菜单");
		}
		model.addAttribute("menuDO", menuDO);
		return "admin/menu/modify_menu";

	}

	/**
	 * 菜单-编辑
	 */
	@RequestMapping(value = "/modifyMenu")
	@ResponseBody
	public String modifyMenu(@ModelAttribute("menuDO") MenuDO menuDO, BindingResult bindResult, Model model, HttpServletRequest request){
		BaseResult result = new BaseResult();
		if (bindResult.hasErrors()) {
			return new BaseResult(false,"2003","绑定错误").toString();
		}
		try {
			String parentMenuId = request.getParameter("org.id");
			menuDO.setParentMenuId(parentMenuId);
			menuDO.setLastUpdateUser(SessionMgr.getUserId(request).toString());
			if(!menuService.modifyMenu(menuDO)){
				return new BaseResult(false,"2001","菜单编辑失败").toString();
			}
			roleService.initRolesAndMenus(request);
		} catch (Exception e) {
			log.error(this.getClass() + ".modifyMenu() error:" + e.getLocalizedMessage());
			return new BaseException().toString();
		}
		return result.toString();
	}

	/**
	 * 菜单-删除(该菜单下有按钮权限，提醒)
	 */
	@RequestMapping(value = "/removeMenu")
	@ResponseBody
	public String removeMenu(@RequestParam("ids") String ids, HttpServletRequest request) {
		BaseResult result = new BaseResult();
		try {
			List<String> menuIds = Arrays.asList(ids);
			String errorCode = "";
			for (String id : menuIds) {
				List<MenuDO> menuList = menuService.getMenuByParentId(id);
				if (CollectionUtils.isEmpty(menuList)) {
					errorCode = StringUtils.join(menuList, ",");
				}
			}
			if (StringUtils.isNotBlank(errorCode)) {
				String errorMsg = "菜单下有其他菜单/按钮权限:" + errorCode;
				return new BaseResult(false,"2001",errorMsg).toString();
			}
			menuService.removeMenu(menuIds);
			roleService.initRolesAndMenus(request);
		} catch (Exception e) {
			log.error(this.getClass() + ".removeMenu() error:" + e.getLocalizedMessage());
			return new BaseException().toString();
		}
		return result.toString();
	}

}
